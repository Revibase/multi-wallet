/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
} from "gill";
import {
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from ".";

export type Secp256r1VerifyArgsWithDomainAddress = {
  domainConfigKey: Address;
  verifyArgs: Secp256r1VerifyArgs;
};

export type Secp256r1VerifyArgsWithDomainAddressArgs = {
  domainConfigKey: Address;
  verifyArgs: Secp256r1VerifyArgsArgs;
};

export function getSecp256r1VerifyArgsWithDomainAddressEncoder(): Encoder<Secp256r1VerifyArgsWithDomainAddressArgs> {
  return getStructEncoder([
    ["domainConfigKey", getAddressEncoder()],
    ["verifyArgs", getSecp256r1VerifyArgsEncoder()],
  ]);
}

export function getSecp256r1VerifyArgsWithDomainAddressDecoder(): Decoder<Secp256r1VerifyArgsWithDomainAddress> {
  return getStructDecoder([
    ["domainConfigKey", getAddressDecoder()],
    ["verifyArgs", getSecp256r1VerifyArgsDecoder()],
  ]);
}

export function getSecp256r1VerifyArgsWithDomainAddressCodec(): Codec<
  Secp256r1VerifyArgsWithDomainAddressArgs,
  Secp256r1VerifyArgsWithDomainAddress
> {
  return combineCodec(
    getSecp256r1VerifyArgsWithDomainAddressEncoder(),
    getSecp256r1VerifyArgsWithDomainAddressDecoder()
  );
}
