/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const EDIT_DELEGATE_EXTENSION_DISCRIMINATOR = new Uint8Array([6]);

export function getEditDelegateExtensionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    EDIT_DELEGATE_EXTENSION_DISCRIMINATOR
  );
}

export type EditDelegateExtensionInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountDelegateExtensions extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountDelegateExtensions extends string
        ? WritableAccount<TAccountDelegateExtensions>
        : TAccountDelegateExtensions,
      ...TRemainingAccounts,
    ]
  >;

export type EditDelegateExtensionInstructionData = {
  discriminator: ReadonlyUint8Array;
  apiUrl: string;
};

export type EditDelegateExtensionInstructionDataArgs = { apiUrl: string };

export function getEditDelegateExtensionInstructionDataEncoder(): Encoder<EditDelegateExtensionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["apiUrl", addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: EDIT_DELEGATE_EXTENSION_DISCRIMINATOR,
    })
  );
}

export function getEditDelegateExtensionInstructionDataDecoder(): Decoder<EditDelegateExtensionInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["apiUrl", addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getEditDelegateExtensionInstructionDataCodec(): Codec<
  EditDelegateExtensionInstructionDataArgs,
  EditDelegateExtensionInstructionData
> {
  return combineCodec(
    getEditDelegateExtensionInstructionDataEncoder(),
    getEditDelegateExtensionInstructionDataDecoder()
  );
}

export type EditDelegateExtensionInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type EditDelegateExtensionInput<
  TAccountAuthority extends string = string,
  TAccountDelegateExtensions extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  delegateExtensions: Address<TAccountDelegateExtensions>;
  apiUrl: EditDelegateExtensionInstructionDataArgs["apiUrl"];
  remainingAccounts: EditDelegateExtensionInstructionExtraArgs["remainingAccounts"];
};

export function getEditDelegateExtensionInstruction<
  TAccountAuthority extends string,
  TAccountDelegateExtensions extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: EditDelegateExtensionInput<
    TAccountAuthority,
    TAccountDelegateExtensions
  >,
  config?: { programAddress?: TProgramAddress }
): EditDelegateExtensionInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountDelegateExtensions
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    delegateExtensions: {
      value: input.delegateExtensions ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.delegateExtensions),
      ...remainingAccounts,
    ],
    data: getEditDelegateExtensionInstructionDataEncoder().encode(
      args as EditDelegateExtensionInstructionDataArgs
    ),
    programAddress,
  } as EditDelegateExtensionInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountDelegateExtensions
  >);
}

export type ParsedEditDelegateExtensionInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    delegateExtensions: TAccountMetas[1];
  };
  data: EditDelegateExtensionInstructionData;
};

export function parseEditDelegateExtensionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedEditDelegateExtensionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      delegateExtensions: getNextAccount(),
    },
    data: getEditDelegateExtensionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
