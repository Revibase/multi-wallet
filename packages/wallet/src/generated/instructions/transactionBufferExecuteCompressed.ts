/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsReadonlyArgsDecoder,
  getSettingsReadonlyArgsEncoder,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsReadonlyArgs,
  type SettingsReadonlyArgsArgs,
} from "../types";

export const TRANSACTION_BUFFER_EXECUTE_COMPRESSED_DISCRIMINATOR =
  new Uint8Array([24]);

export function getTransactionBufferExecuteCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    TRANSACTION_BUFFER_EXECUTE_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionBufferExecuteCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountExecutor extends string | AccountMeta<string> = string,
  TAccountTransactionBuffer extends string | AccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountExecutor extends string
        ? ReadonlySignerAccount<TAccountExecutor> &
            AccountSignerMeta<TAccountExecutor>
        : TAccountExecutor,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferExecuteCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  settingsReadonly: SettingsReadonlyArgs;
  compressedProofArgs: ProofArgs;
};

export type TransactionBufferExecuteCompressedInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  settingsReadonly: SettingsReadonlyArgsArgs;
  compressedProofArgs: ProofArgsArgs;
};

export function getTransactionBufferExecuteCompressedInstructionDataEncoder(): Encoder<TransactionBufferExecuteCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["settingsReadonly", getSettingsReadonlyArgsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_EXECUTE_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferExecuteCompressedInstructionDataDecoder(): Decoder<TransactionBufferExecuteCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["settingsReadonly", getSettingsReadonlyArgsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
  ]);
}

export function getTransactionBufferExecuteCompressedInstructionDataCodec(): Codec<
  TransactionBufferExecuteCompressedInstructionDataArgs,
  TransactionBufferExecuteCompressedInstructionData
> {
  return combineCodec(
    getTransactionBufferExecuteCompressedInstructionDataEncoder(),
    getTransactionBufferExecuteCompressedInstructionDataDecoder()
  );
}

export type TransactionBufferExecuteCompressedInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type TransactionBufferExecuteCompressedInput<
  TAccountPayer extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountExecutor extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  domainConfig?: Address<TAccountDomainConfig>;
  executor?: TransactionSigner<TAccountExecutor>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  secp256r1VerifyArgs: TransactionBufferExecuteCompressedInstructionDataArgs["secp256r1VerifyArgs"];
  settingsReadonly: TransactionBufferExecuteCompressedInstructionDataArgs["settingsReadonly"];
  compressedProofArgs: TransactionBufferExecuteCompressedInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: TransactionBufferExecuteCompressedInstructionExtraArgs["remainingAccounts"];
};

export function getTransactionBufferExecuteCompressedInstruction<
  TAccountPayer extends string,
  TAccountDomainConfig extends string,
  TAccountExecutor extends string,
  TAccountTransactionBuffer extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionBufferExecuteCompressedInput<
    TAccountPayer,
    TAccountDomainConfig,
    TAccountExecutor,
    TAccountTransactionBuffer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferExecuteCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountDomainConfig,
  TAccountExecutor,
  TAccountTransactionBuffer,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    executor: { value: input.executor ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.executor),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      ...remainingAccounts,
    ],
    data: getTransactionBufferExecuteCompressedInstructionDataEncoder().encode(
      args as TransactionBufferExecuteCompressedInstructionDataArgs
    ),
    programAddress,
  } as TransactionBufferExecuteCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountDomainConfig,
    TAccountExecutor,
    TAccountTransactionBuffer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >);
}

export type ParsedTransactionBufferExecuteCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    domainConfig?: TAccountMetas[1] | undefined;
    executor?: TAccountMetas[2] | undefined;
    transactionBuffer: TAccountMetas[3];
    slotHashSysvar?: TAccountMetas[4] | undefined;
    instructionsSysvar?: TAccountMetas[5] | undefined;
  };
  data: TransactionBufferExecuteCompressedInstructionData;
};

export function parseTransactionBufferExecuteCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransactionBufferExecuteCompressedInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
      executor: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferExecuteCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
