/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getCreateDelegateArgDecoder,
  getCreateDelegateArgEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  type CreateDelegateArg,
  type CreateDelegateArgArgs,
  type ProofArgs,
  type ProofArgsArgs,
} from "../types";

export const CREATE_DELEGATES_DISCRIMINATOR = new Uint8Array([5]);

export function getCreateDelegatesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CREATE_DELEGATES_DISCRIMINATOR
  );
}

export type CreateDelegatesInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateDelegatesInstructionData = {
  discriminator: ReadonlyUint8Array;
  compressedProofArgs: ProofArgs;
  createDelegateArgs: Array<CreateDelegateArg>;
};

export type CreateDelegatesInstructionDataArgs = {
  compressedProofArgs: ProofArgsArgs;
  createDelegateArgs: Array<CreateDelegateArgArgs>;
};

export function getCreateDelegatesInstructionDataEncoder(): Encoder<CreateDelegatesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["compressedProofArgs", getProofArgsEncoder()],
      ["createDelegateArgs", getArrayEncoder(getCreateDelegateArgEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_DELEGATES_DISCRIMINATOR })
  );
}

export function getCreateDelegatesInstructionDataDecoder(): Decoder<CreateDelegatesInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["compressedProofArgs", getProofArgsDecoder()],
    ["createDelegateArgs", getArrayDecoder(getCreateDelegateArgDecoder())],
  ]);
}

export function getCreateDelegatesInstructionDataCodec(): Codec<
  CreateDelegatesInstructionDataArgs,
  CreateDelegatesInstructionData
> {
  return combineCodec(
    getCreateDelegatesInstructionDataEncoder(),
    getCreateDelegatesInstructionDataDecoder()
  );
}

export type CreateDelegatesInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type CreateDelegatesInput<
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  compressedProofArgs: CreateDelegatesInstructionDataArgs["compressedProofArgs"];
  createDelegateArgs: CreateDelegatesInstructionDataArgs["createDelegateArgs"];
  remainingAccounts: CreateDelegatesInstructionExtraArgs["remainingAccounts"];
};

export function getCreateDelegatesInstruction<
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CreateDelegatesInput<TAccountPayer, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): CreateDelegatesInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      ...remainingAccounts,
    ],
    data: getCreateDelegatesInstructionDataEncoder().encode(
      args as CreateDelegatesInstructionDataArgs
    ),
    programAddress,
  } as CreateDelegatesInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export type ParsedCreateDelegatesInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    systemProgram: TAccountMetas[1];
  };
  data: CreateDelegatesInstructionData;
};

export function parseCreateDelegatesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateDelegatesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { payer: getNextAccount(), systemProgram: getNextAccount() },
    data: getCreateDelegatesInstructionDataDecoder().decode(instruction.data),
  };
}
