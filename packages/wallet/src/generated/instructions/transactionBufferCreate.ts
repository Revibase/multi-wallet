/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getTransactionBufferCreateArgsDecoder,
  getTransactionBufferCreateArgsEncoder,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type TransactionBufferCreateArgs,
  type TransactionBufferCreateArgsArgs,
} from "../types";

export const TRANSACTION_BUFFER_CREATE_DISCRIMINATOR = new Uint8Array([9]);

export function getTransactionBufferCreateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    TRANSACTION_BUFFER_CREATE_DISCRIMINATOR
  );
}

export type TransactionBufferCreateInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountTransactionBuffer extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferCreateInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: TransactionBufferCreateArgs;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
};

export type TransactionBufferCreateInstructionDataArgs = {
  args: TransactionBufferCreateArgsArgs;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
};

export function getTransactionBufferCreateInstructionDataEncoder(): Encoder<TransactionBufferCreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["args", getTransactionBufferCreateArgsEncoder()],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_CREATE_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferCreateInstructionDataDecoder(): Decoder<TransactionBufferCreateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["args", getTransactionBufferCreateArgsDecoder()],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
  ]);
}

export function getTransactionBufferCreateInstructionDataCodec(): Codec<
  TransactionBufferCreateInstructionDataArgs,
  TransactionBufferCreateInstructionData
> {
  return combineCodec(
    getTransactionBufferCreateInstructionDataEncoder(),
    getTransactionBufferCreateInstructionDataDecoder()
  );
}

export type TransactionBufferCreateInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type TransactionBufferCreateInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountSlotHashSysvar extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  domainConfig?: Address<TAccountDomainConfig>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  creator?: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  args: TransactionBufferCreateInstructionDataArgs["args"];
  secp256r1VerifyArgs: TransactionBufferCreateInstructionDataArgs["secp256r1VerifyArgs"];
  remainingAccounts: TransactionBufferCreateInstructionExtraArgs["remainingAccounts"];
};

export function getTransactionBufferCreateInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountDomainConfig extends string,
  TAccountTransactionBuffer extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountInstructionsSysvar extends string,
  TAccountSlotHashSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionBufferCreateInput<
    TAccountSettings,
    TAccountPayer,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountInstructionsSysvar,
    TAccountSlotHashSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferCreateInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountDomainConfig,
  TAccountTransactionBuffer,
  TAccountCreator,
  TAccountSystemProgram,
  TAccountInstructionsSysvar,
  TAccountSlotHashSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    creator: { value: input.creator ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.slotHashSysvar),
      ...remainingAccounts,
    ],
    data: getTransactionBufferCreateInstructionDataEncoder().encode(
      args as TransactionBufferCreateInstructionDataArgs
    ),
    programAddress,
  } as TransactionBufferCreateInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountInstructionsSysvar,
    TAccountSlotHashSysvar
  >);
}

export type ParsedTransactionBufferCreateInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    domainConfig?: TAccountMetas[2] | undefined;
    transactionBuffer: TAccountMetas[3];
    creator?: TAccountMetas[4] | undefined;
    systemProgram: TAccountMetas[5];
    instructionsSysvar: TAccountMetas[6];
    slotHashSysvar?: TAccountMetas[7] | undefined;
  };
  data: TransactionBufferCreateInstructionData;
};

export function parseTransactionBufferCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransactionBufferCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      creator: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      instructionsSysvar: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferCreateInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
