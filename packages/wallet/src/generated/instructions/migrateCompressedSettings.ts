/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getCompressedSettingsDataDecoder,
  getCompressedSettingsDataEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSettingsCreationArgsDecoder,
  getSettingsCreationArgsEncoder,
  type CompressedSettingsData,
  type CompressedSettingsDataArgs,
  type ProofArgs,
  type ProofArgsArgs,
  type SettingsCreationArgs,
  type SettingsCreationArgsArgs,
} from "../types";

export const MIGRATE_COMPRESSED_SETTINGS_DISCRIMINATOR = new Uint8Array([32]);

export function getMigrateCompressedSettingsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    MIGRATE_COMPRESSED_SETTINGS_DISCRIMINATOR
  );
}

export type MigrateCompressedSettingsInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountAuthority extends
    | string
    | AccountMeta<string> = "AMn21jT5RMZrv5hSvtkrWCMJFp3cUyeAx4AxKvF59xJZ",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type MigrateCompressedSettingsInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: CompressedSettingsData;
  compressedProofArgs: ProofArgs;
  settingsCreationArgs: SettingsCreationArgs;
};

export type MigrateCompressedSettingsInstructionDataArgs = {
  args: CompressedSettingsDataArgs;
  compressedProofArgs: ProofArgsArgs;
  settingsCreationArgs: SettingsCreationArgsArgs;
};

export function getMigrateCompressedSettingsInstructionDataEncoder(): Encoder<MigrateCompressedSettingsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["args", getCompressedSettingsDataEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
      ["settingsCreationArgs", getSettingsCreationArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: MIGRATE_COMPRESSED_SETTINGS_DISCRIMINATOR,
    })
  );
}

export function getMigrateCompressedSettingsInstructionDataDecoder(): Decoder<MigrateCompressedSettingsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["args", getCompressedSettingsDataDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
    ["settingsCreationArgs", getSettingsCreationArgsDecoder()],
  ]);
}

export function getMigrateCompressedSettingsInstructionDataCodec(): Codec<
  MigrateCompressedSettingsInstructionDataArgs,
  MigrateCompressedSettingsInstructionData
> {
  return combineCodec(
    getMigrateCompressedSettingsInstructionDataEncoder(),
    getMigrateCompressedSettingsInstructionDataDecoder()
  );
}

export type MigrateCompressedSettingsInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type MigrateCompressedSettingsInput<
  TAccountAuthority extends string = string,
> = {
  authority?: TransactionSigner<TAccountAuthority>;
  args: MigrateCompressedSettingsInstructionDataArgs["args"];
  compressedProofArgs: MigrateCompressedSettingsInstructionDataArgs["compressedProofArgs"];
  settingsCreationArgs: MigrateCompressedSettingsInstructionDataArgs["settingsCreationArgs"];
  remainingAccounts: MigrateCompressedSettingsInstructionExtraArgs["remainingAccounts"];
};

export function getMigrateCompressedSettingsInstruction<
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: MigrateCompressedSettingsInput<TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): MigrateCompressedSettingsInstruction<TProgramAddress, TAccountAuthority> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value =
      "AMn21jT5RMZrv5hSvtkrWCMJFp3cUyeAx4AxKvF59xJZ" as Address<"AMn21jT5RMZrv5hSvtkrWCMJFp3cUyeAx4AxKvF59xJZ">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [getAccountMeta(accounts.authority), ...remainingAccounts],
    data: getMigrateCompressedSettingsInstructionDataEncoder().encode(
      args as MigrateCompressedSettingsInstructionDataArgs
    ),
    programAddress,
  } as MigrateCompressedSettingsInstruction<
    TProgramAddress,
    TAccountAuthority
  >);
}

export type ParsedMigrateCompressedSettingsInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
  };
  data: MigrateCompressedSettingsInstructionData;
};

export function parseMigrateCompressedSettingsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMigrateCompressedSettingsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { authority: getNextAccount() },
    data: getMigrateCompressedSettingsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
