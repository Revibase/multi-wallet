/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getDelegateMutArgsDecoder,
  getDelegateMutArgsEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsCreationArgsDecoder,
  getSettingsCreationArgsEncoder,
  type DelegateMutArgs,
  type DelegateMutArgsArgs,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsCreationArgs,
  type SettingsCreationArgsArgs,
} from "../types";

export const CREATE_MULTI_WALLET_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  18,
]);

export function getCreateMultiWalletCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CREATE_MULTI_WALLET_COMPRESSED_DISCRIMINATOR
  );
}

export type CreateMultiWalletCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountInitialMember extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountGlobalCounter extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountInitialMember extends string
        ? ReadonlySignerAccount<TAccountInitialMember> &
            AccountSignerMeta<TAccountInitialMember>
        : TAccountInitialMember,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountGlobalCounter extends string
        ? WritableAccount<TAccountGlobalCounter>
        : TAccountGlobalCounter,
      ...TRemainingAccounts,
    ]
  >;

export type CreateMultiWalletCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  compressedProofArgs: ProofArgs;
  settingsCreation: SettingsCreationArgs;
  delegateMutArgs: DelegateMutArgs;
  settingsIndex: bigint;
  setAsDelegate: boolean;
};

export type CreateMultiWalletCompressedInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  compressedProofArgs: ProofArgsArgs;
  settingsCreation: SettingsCreationArgsArgs;
  delegateMutArgs: DelegateMutArgsArgs;
  settingsIndex: number | bigint;
  setAsDelegate: boolean;
};

export function getCreateMultiWalletCompressedInstructionDataEncoder(): Encoder<CreateMultiWalletCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["compressedProofArgs", getProofArgsEncoder()],
      ["settingsCreation", getSettingsCreationArgsEncoder()],
      ["delegateMutArgs", getDelegateMutArgsEncoder()],
      ["settingsIndex", getU128Encoder()],
      ["setAsDelegate", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_MULTI_WALLET_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getCreateMultiWalletCompressedInstructionDataDecoder(): Decoder<CreateMultiWalletCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["compressedProofArgs", getProofArgsDecoder()],
    ["settingsCreation", getSettingsCreationArgsDecoder()],
    ["delegateMutArgs", getDelegateMutArgsDecoder()],
    ["settingsIndex", getU128Decoder()],
    ["setAsDelegate", getBooleanDecoder()],
  ]);
}

export function getCreateMultiWalletCompressedInstructionDataCodec(): Codec<
  CreateMultiWalletCompressedInstructionDataArgs,
  CreateMultiWalletCompressedInstructionData
> {
  return combineCodec(
    getCreateMultiWalletCompressedInstructionDataEncoder(),
    getCreateMultiWalletCompressedInstructionDataDecoder()
  );
}

export type CreateMultiWalletCompressedInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type CreateMultiWalletCompressedInput<
  TAccountPayer extends string = string,
  TAccountInitialMember extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountGlobalCounter extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  initialMember?: TransactionSigner<TAccountInitialMember>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  globalCounter: Address<TAccountGlobalCounter>;
  secp256r1VerifyArgs: CreateMultiWalletCompressedInstructionDataArgs["secp256r1VerifyArgs"];
  compressedProofArgs: CreateMultiWalletCompressedInstructionDataArgs["compressedProofArgs"];
  settingsCreation: CreateMultiWalletCompressedInstructionDataArgs["settingsCreation"];
  delegateMutArgs: CreateMultiWalletCompressedInstructionDataArgs["delegateMutArgs"];
  settingsIndex: CreateMultiWalletCompressedInstructionDataArgs["settingsIndex"];
  setAsDelegate: CreateMultiWalletCompressedInstructionDataArgs["setAsDelegate"];
  remainingAccounts: CreateMultiWalletCompressedInstructionExtraArgs["remainingAccounts"];
};

export function getCreateMultiWalletCompressedInstruction<
  TAccountPayer extends string,
  TAccountInitialMember extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountGlobalCounter extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CreateMultiWalletCompressedInput<
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter
  >,
  config?: { programAddress?: TProgramAddress }
): CreateMultiWalletCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountInitialMember,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TAccountDomainConfig,
  TAccountGlobalCounter
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    initialMember: { value: input.initialMember ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    globalCounter: { value: input.globalCounter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.initialMember),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.globalCounter),
      ...remainingAccounts,
    ],
    data: getCreateMultiWalletCompressedInstructionDataEncoder().encode(
      args as CreateMultiWalletCompressedInstructionDataArgs
    ),
    programAddress,
  } as CreateMultiWalletCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter
  >);
}

export type ParsedCreateMultiWalletCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    initialMember?: TAccountMetas[1] | undefined;
    systemProgram: TAccountMetas[2];
    slotHashSysvar?: TAccountMetas[3] | undefined;
    instructionsSysvar?: TAccountMetas[4] | undefined;
    domainConfig?: TAccountMetas[5] | undefined;
    globalCounter: TAccountMetas[6];
  };
  data: CreateMultiWalletCompressedInstructionData;
};

export function parseCreateMultiWalletCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateMultiWalletCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      initialMember: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
      domainConfig: getNextOptionalAccount(),
      globalCounter: getNextAccount(),
    },
    data: getCreateMultiWalletCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
