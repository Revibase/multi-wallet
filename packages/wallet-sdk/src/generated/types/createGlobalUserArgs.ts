/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from "gill";
import {
  getUserCreationArgsDecoder,
  getUserCreationArgsEncoder,
  type UserCreationArgs,
  type UserCreationArgsArgs,
} from ".";

export type CreateGlobalUserArgs = {
  member: Address;
  isPermanentMember: boolean;
  userCreationArgs: UserCreationArgs;
  apiUrl: Option<string>;
};

export type CreateGlobalUserArgsArgs = {
  member: Address;
  isPermanentMember: boolean;
  userCreationArgs: UserCreationArgsArgs;
  apiUrl: OptionOrNullable<string>;
};

export function getCreateGlobalUserArgsEncoder(): Encoder<CreateGlobalUserArgsArgs> {
  return getStructEncoder([
    ["member", getAddressEncoder()],
    ["isPermanentMember", getBooleanEncoder()],
    ["userCreationArgs", getUserCreationArgsEncoder()],
    [
      "apiUrl",
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
  ]);
}

export function getCreateGlobalUserArgsDecoder(): Decoder<CreateGlobalUserArgs> {
  return getStructDecoder([
    ["member", getAddressDecoder()],
    ["isPermanentMember", getBooleanDecoder()],
    ["userCreationArgs", getUserCreationArgsDecoder()],
    [
      "apiUrl",
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getCreateGlobalUserArgsCodec(): Codec<
  CreateGlobalUserArgsArgs,
  CreateGlobalUserArgs
> {
  return combineCodec(
    getCreateGlobalUserArgsEncoder(),
    getCreateGlobalUserArgsDecoder()
  );
}
