/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type Secp256r1VerifyArgs = {
  index: number;
  slotNumber: bigint;
  clientDataJson: ReadonlyUint8Array;
};

export type Secp256r1VerifyArgsArgs = {
  index: number;
  slotNumber: number | bigint;
  clientDataJson: ReadonlyUint8Array;
};

export function getSecp256r1VerifyArgsEncoder(): Encoder<Secp256r1VerifyArgsArgs> {
  return getStructEncoder([
    ['index', getU8Encoder()],
    ['slotNumber', getU64Encoder()],
    [
      'clientDataJson',
      addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
    ],
  ]);
}

export function getSecp256r1VerifyArgsDecoder(): Decoder<Secp256r1VerifyArgs> {
  return getStructDecoder([
    ['index', getU8Decoder()],
    ['slotNumber', getU64Decoder()],
    [
      'clientDataJson',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
  ]);
}

export function getSecp256r1VerifyArgsCodec(): Codec<
  Secp256r1VerifyArgsArgs,
  Secp256r1VerifyArgs
> {
  return combineCodec(
    getSecp256r1VerifyArgsEncoder(),
    getSecp256r1VerifyArgsDecoder()
  );
}
