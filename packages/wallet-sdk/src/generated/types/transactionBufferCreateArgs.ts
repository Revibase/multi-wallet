/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from "gill";

export type TransactionBufferCreateArgs = {
  bufferIndex: number;
  permissionlessExecution: boolean;
  bufferExtendHashes: Array<ReadonlyUint8Array>;
  finalBufferHash: ReadonlyUint8Array;
  finalBufferSize: number;
};

export type TransactionBufferCreateArgsArgs = TransactionBufferCreateArgs;

export function getTransactionBufferCreateArgsEncoder(): Encoder<TransactionBufferCreateArgsArgs> {
  return getStructEncoder([
    ["bufferIndex", getU8Encoder()],
    ["permissionlessExecution", getBooleanEncoder()],
    [
      "bufferExtendHashes",
      getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32)),
    ],
    ["finalBufferHash", fixEncoderSize(getBytesEncoder(), 32)],
    ["finalBufferSize", getU16Encoder()],
  ]);
}

export function getTransactionBufferCreateArgsDecoder(): Decoder<TransactionBufferCreateArgs> {
  return getStructDecoder([
    ["bufferIndex", getU8Decoder()],
    ["permissionlessExecution", getBooleanDecoder()],
    [
      "bufferExtendHashes",
      getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32)),
    ],
    ["finalBufferHash", fixDecoderSize(getBytesDecoder(), 32)],
    ["finalBufferSize", getU16Decoder()],
  ]);
}

export function getTransactionBufferCreateArgsCodec(): Codec<
  TransactionBufferCreateArgsArgs,
  TransactionBufferCreateArgs
> {
  return combineCodec(
    getTransactionBufferCreateArgsEncoder(),
    getTransactionBufferCreateArgsDecoder()
  );
}
