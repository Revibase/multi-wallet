/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getPackedStateTreeInfoDecoder,
  getPackedStateTreeInfoEncoder,
  type PackedStateTreeInfo,
  type PackedStateTreeInfoArgs,
} from '.';

export type CompressedAccountMeta = {
  /** Merkle tree context. */
  treeInfo: PackedStateTreeInfo;
  /** Address. */
  address: ReadonlyUint8Array;
  /** Output merkle tree index. */
  outputStateTreeIndex: number;
};

export type CompressedAccountMetaArgs = {
  /** Merkle tree context. */
  treeInfo: PackedStateTreeInfoArgs;
  /** Address. */
  address: ReadonlyUint8Array;
  /** Output merkle tree index. */
  outputStateTreeIndex: number;
};

export function getCompressedAccountMetaEncoder(): Encoder<CompressedAccountMetaArgs> {
  return getStructEncoder([
    ['treeInfo', getPackedStateTreeInfoEncoder()],
    ['address', fixEncoderSize(getBytesEncoder(), 32)],
    ['outputStateTreeIndex', getU8Encoder()],
  ]);
}

export function getCompressedAccountMetaDecoder(): Decoder<CompressedAccountMeta> {
  return getStructDecoder([
    ['treeInfo', getPackedStateTreeInfoDecoder()],
    ['address', fixDecoderSize(getBytesDecoder(), 32)],
    ['outputStateTreeIndex', getU8Decoder()],
  ]);
}

export function getCompressedAccountMetaCodec(): Codec<
  CompressedAccountMetaArgs,
  CompressedAccountMeta
> {
  return combineCodec(
    getCompressedAccountMetaEncoder(),
    getCompressedAccountMetaDecoder()
  );
}
