/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
} from "gill";
import {
  getDelegateCreationArgsDecoder,
  getDelegateCreationArgsEncoder,
  getLinkWalletArgsDecoder,
  getLinkWalletArgsEncoder,
  getSecp256r1PubkeyDecoder,
  getSecp256r1PubkeyEncoder,
  type DelegateCreationArgs,
  type DelegateCreationArgsArgs,
  type LinkWalletArgs,
  type LinkWalletArgsArgs,
  type Secp256r1Pubkey,
  type Secp256r1PubkeyArgs,
} from ".";

export type CreateDomainDelegateArg = {
  member: Secp256r1Pubkey;
  isPermanentMember: boolean;
  delegateCreationArgs: DelegateCreationArgs;
  linkWalletArgs: Option<LinkWalletArgs>;
};

export type CreateDomainDelegateArgArgs = {
  member: Secp256r1PubkeyArgs;
  isPermanentMember: boolean;
  delegateCreationArgs: DelegateCreationArgsArgs;
  linkWalletArgs: OptionOrNullable<LinkWalletArgsArgs>;
};

export function getCreateDomainDelegateArgEncoder(): Encoder<CreateDomainDelegateArgArgs> {
  return getStructEncoder([
    ["member", getSecp256r1PubkeyEncoder()],
    ["isPermanentMember", getBooleanEncoder()],
    ["delegateCreationArgs", getDelegateCreationArgsEncoder()],
    ["linkWalletArgs", getOptionEncoder(getLinkWalletArgsEncoder())],
  ]);
}

export function getCreateDomainDelegateArgDecoder(): Decoder<CreateDomainDelegateArg> {
  return getStructDecoder([
    ["member", getSecp256r1PubkeyDecoder()],
    ["isPermanentMember", getBooleanDecoder()],
    ["delegateCreationArgs", getDelegateCreationArgsDecoder()],
    ["linkWalletArgs", getOptionDecoder(getLinkWalletArgsDecoder())],
  ]);
}

export function getCreateDomainDelegateArgCodec(): Codec<
  CreateDomainDelegateArgArgs,
  CreateDomainDelegateArg
> {
  return combineCodec(
    getCreateDomainDelegateArgEncoder(),
    getCreateDomainDelegateArgDecoder()
  );
}
