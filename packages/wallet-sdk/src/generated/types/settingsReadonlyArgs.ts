/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from '@solana/kit';
import {
  getCompressedSettingsDecoder,
  getCompressedSettingsEncoder,
  getPackedAddressTreeInfoDecoder,
  getPackedAddressTreeInfoEncoder,
  getPackedMerkleContextDecoder,
  getPackedMerkleContextEncoder,
  type CompressedSettings,
  type CompressedSettingsArgs,
  type PackedAddressTreeInfo,
  type PackedAddressTreeInfoArgs,
  type PackedMerkleContext,
  type PackedMerkleContextArgs,
} from '.';

export type SettingsReadonlyArgs = {
  merkleContext: PackedMerkleContext;
  addressTreeInfo: PackedAddressTreeInfo;
  data: CompressedSettings;
  lamports: bigint;
};

export type SettingsReadonlyArgsArgs = {
  merkleContext: PackedMerkleContextArgs;
  addressTreeInfo: PackedAddressTreeInfoArgs;
  data: CompressedSettingsArgs;
  lamports: number | bigint;
};

export function getSettingsReadonlyArgsEncoder(): Encoder<SettingsReadonlyArgsArgs> {
  return getStructEncoder([
    ['merkleContext', getPackedMerkleContextEncoder()],
    ['addressTreeInfo', getPackedAddressTreeInfoEncoder()],
    ['data', getCompressedSettingsEncoder()],
    ['lamports', getU64Encoder()],
  ]);
}

export function getSettingsReadonlyArgsDecoder(): Decoder<SettingsReadonlyArgs> {
  return getStructDecoder([
    ['merkleContext', getPackedMerkleContextDecoder()],
    ['addressTreeInfo', getPackedAddressTreeInfoDecoder()],
    ['data', getCompressedSettingsDecoder()],
    ['lamports', getU64Decoder()],
  ]);
}

export function getSettingsReadonlyArgsCodec(): Codec<
  SettingsReadonlyArgsArgs,
  SettingsReadonlyArgs
> {
  return combineCodec(
    getSettingsReadonlyArgsEncoder(),
    getSettingsReadonlyArgsDecoder()
  );
}
