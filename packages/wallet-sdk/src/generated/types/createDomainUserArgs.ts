/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  getSecp256r1PubkeyDecoder,
  getSecp256r1PubkeyEncoder,
  getTransportDecoder,
  getTransportEncoder,
  getUserCreationArgsDecoder,
  getUserCreationArgsEncoder,
  type Secp256r1Pubkey,
  type Secp256r1PubkeyArgs,
  type Transport,
  type TransportArgs,
  type UserCreationArgs,
  type UserCreationArgsArgs,
} from ".";

export type CreateDomainUserArgs = {
  member: Secp256r1Pubkey;
  credentialId: ReadonlyUint8Array;
  mint: Option<Address>;
  username: Option<string>;
  expiry: Option<bigint>;
  isPermanentMember: boolean;
  userCreationArgs: UserCreationArgs;
  transports: Array<Transport>;
};

export type CreateDomainUserArgsArgs = {
  member: Secp256r1PubkeyArgs;
  credentialId: ReadonlyUint8Array;
  mint: OptionOrNullable<Address>;
  username: OptionOrNullable<string>;
  expiry: OptionOrNullable<number | bigint>;
  isPermanentMember: boolean;
  userCreationArgs: UserCreationArgsArgs;
  transports: Array<TransportArgs>;
};

export function getCreateDomainUserArgsEncoder(): Encoder<CreateDomainUserArgsArgs> {
  return getStructEncoder([
    ["member", getSecp256r1PubkeyEncoder()],
    ["credentialId", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ["mint", getOptionEncoder(getAddressEncoder())],
    [
      "username",
      getOptionEncoder(addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())),
    ],
    ["expiry", getOptionEncoder(getU64Encoder())],
    ["isPermanentMember", getBooleanEncoder()],
    ["userCreationArgs", getUserCreationArgsEncoder()],
    ["transports", getArrayEncoder(getTransportEncoder())],
  ]);
}

export function getCreateDomainUserArgsDecoder(): Decoder<CreateDomainUserArgs> {
  return getStructDecoder([
    ["member", getSecp256r1PubkeyDecoder()],
    ["credentialId", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ["mint", getOptionDecoder(getAddressDecoder())],
    [
      "username",
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
    ["expiry", getOptionDecoder(getU64Decoder())],
    ["isPermanentMember", getBooleanDecoder()],
    ["userCreationArgs", getUserCreationArgsDecoder()],
    ["transports", getArrayDecoder(getTransportDecoder())],
  ]);
}

export function getCreateDomainUserArgsCodec(): Codec<
  CreateDomainUserArgsArgs,
  CreateDomainUserArgs
> {
  return combineCodec(
    getCreateDomainUserArgsEncoder(),
    getCreateDomainUserArgsDecoder()
  );
}
