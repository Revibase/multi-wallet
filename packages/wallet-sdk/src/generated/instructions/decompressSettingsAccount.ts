/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getCompressedAccountMetaCloseDecoder,
  getCompressedAccountMetaCloseEncoder,
  getCompressedSettingsDecoder,
  getCompressedSettingsEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type CompressedAccountMetaClose,
  type CompressedAccountMetaCloseArgs,
  type CompressedSettings,
  type CompressedSettingsArgs,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from "../types";

export const DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  237, 87, 232, 84, 218, 176, 222, 134,
]);

export function getDecompressSettingsAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR
  );
}

export type DecompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type DecompressSettingsAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  accountMeta: CompressedAccountMetaClose;
  data: CompressedSettings;
  compressedProofArgs: ProofArgs;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
};

export type DecompressSettingsAccountInstructionDataArgs = {
  accountMeta: CompressedAccountMetaCloseArgs;
  data: CompressedSettingsArgs;
  compressedProofArgs: ProofArgsArgs;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
};

export function getDecompressSettingsAccountInstructionDataEncoder(): Encoder<DecompressSettingsAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["accountMeta", getCompressedAccountMetaCloseEncoder()],
      ["data", getCompressedSettingsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getDecompressSettingsAccountInstructionDataDecoder(): Decoder<DecompressSettingsAccountInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["accountMeta", getCompressedAccountMetaCloseDecoder()],
    ["data", getCompressedSettingsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
  ]);
}

export function getDecompressSettingsAccountInstructionDataCodec(): Codec<
  DecompressSettingsAccountInstructionDataArgs,
  DecompressSettingsAccountInstructionData
> {
  return combineCodec(
    getDecompressSettingsAccountInstructionDataEncoder(),
    getDecompressSettingsAccountInstructionDataDecoder()
  );
}

export type DecompressSettingsAccountInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  accountMeta: DecompressSettingsAccountInstructionDataArgs["accountMeta"];
  data: DecompressSettingsAccountInstructionDataArgs["data"];
  compressedProofArgs: DecompressSettingsAccountInstructionDataArgs["compressedProofArgs"];
  secp256r1VerifyArgs: DecompressSettingsAccountInstructionDataArgs["secp256r1VerifyArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getDecompressSettingsAccountInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
>(
  input: DecompressSettingsAccountInput<
    TAccountSettings,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountDomainConfig,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): DecompressSettingsAccountInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountDomainConfig,
  TAccountInstructionsSysvar,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.instructionsSysvar),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getDecompressSettingsAccountInstructionDataEncoder().encode(
      args as DecompressSettingsAccountInstructionDataArgs
    ),
  } as DecompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountDomainConfig,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedDecompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    slotHashSysvar?: TAccountMetas[3] | undefined;
    domainConfig?: TAccountMetas[4] | undefined;
    instructionsSysvar: TAccountMetas[5];
  };
  data: DecompressSettingsAccountInstructionData;
};

export function parseDecompressSettingsAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDecompressSettingsAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      domainConfig: getNextOptionalAccount(),
      instructionsSysvar: getNextAccount(),
    },
    data: getDecompressSettingsAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
