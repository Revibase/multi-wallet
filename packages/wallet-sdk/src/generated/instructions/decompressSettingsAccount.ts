/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsWithDomainAddressDecoder,
  getSecp256r1VerifyArgsWithDomainAddressEncoder,
  getSettingsMutArgsDecoder,
  getSettingsMutArgsEncoder,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgsWithDomainAddress,
  type Secp256r1VerifyArgsWithDomainAddressArgs,
  type SettingsMutArgs,
  type SettingsMutArgsArgs,
} from "../types";

export const DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR = new Uint8Array([17]);

export function getDecompressSettingsAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR
  );
}

export type DecompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type DecompressSettingsAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  settingsMut: SettingsMutArgs;
  compressedProofArgs: ProofArgs;
  secp256r1VerifyArgs: Array<Secp256r1VerifyArgsWithDomainAddress>;
};

export type DecompressSettingsAccountInstructionDataArgs = {
  settingsMut: SettingsMutArgsArgs;
  compressedProofArgs: ProofArgsArgs;
  secp256r1VerifyArgs: Array<Secp256r1VerifyArgsWithDomainAddressArgs>;
};

export function getDecompressSettingsAccountInstructionDataEncoder(): Encoder<DecompressSettingsAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["settingsMut", getSettingsMutArgsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
      [
        "secp256r1VerifyArgs",
        getArrayEncoder(getSecp256r1VerifyArgsWithDomainAddressEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getDecompressSettingsAccountInstructionDataDecoder(): Decoder<DecompressSettingsAccountInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["settingsMut", getSettingsMutArgsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
    [
      "secp256r1VerifyArgs",
      getArrayDecoder(getSecp256r1VerifyArgsWithDomainAddressDecoder()),
    ],
  ]);
}

export function getDecompressSettingsAccountInstructionDataCodec(): Codec<
  DecompressSettingsAccountInstructionDataArgs,
  DecompressSettingsAccountInstructionData
> {
  return combineCodec(
    getDecompressSettingsAccountInstructionDataEncoder(),
    getDecompressSettingsAccountInstructionDataDecoder()
  );
}

export type DecompressSettingsAccountInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type DecompressSettingsAccountInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  settingsMut: DecompressSettingsAccountInstructionDataArgs["settingsMut"];
  compressedProofArgs: DecompressSettingsAccountInstructionDataArgs["compressedProofArgs"];
  secp256r1VerifyArgs: DecompressSettingsAccountInstructionDataArgs["secp256r1VerifyArgs"];
  remainingAccounts: DecompressSettingsAccountInstructionExtraArgs["remainingAccounts"];
};

export function getDecompressSettingsAccountInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: DecompressSettingsAccountInput<
    TAccountSettings,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): DecompressSettingsAccountInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      ...remainingAccounts,
    ],
    data: getDecompressSettingsAccountInstructionDataEncoder().encode(
      args as DecompressSettingsAccountInstructionDataArgs
    ),
    programAddress,
  } as DecompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >);
}

export type ParsedDecompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    slotHashSysvar?: TAccountMetas[3] | undefined;
    instructionsSysvar: TAccountMetas[4];
  };
  data: DecompressSettingsAccountInstructionData;
};

export function parseDecompressSettingsAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDecompressSettingsAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextAccount(),
    },
    data: getDecompressSettingsAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
