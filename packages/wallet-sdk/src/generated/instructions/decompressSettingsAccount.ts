/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getCompressedAccountMetaCloseDecoder,
  getCompressedAccountMetaCloseEncoder,
  getSettingsDecoder,
  getSettingsEncoder,
  getValidityProofDecoder,
  getValidityProofEncoder,
  type CompressedAccountMetaClose,
  type CompressedAccountMetaCloseArgs,
  type Settings,
  type SettingsArgs,
  type ValidityProof,
  type ValidityProofArgs,
} from '../types';

export const DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  237, 87, 232, 84, 218, 176, 222, 134,
]);

export function getDecompressSettingsAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR
  );
}

export type DecompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettingsAccount extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettingsAccount extends string
        ? WritableAccount<TAccountSettingsAccount>
        : TAccountSettingsAccount,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DecompressSettingsAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  proof: ValidityProof;
  accountMeta: CompressedAccountMetaClose;
  settings: Settings;
};

export type DecompressSettingsAccountInstructionDataArgs = {
  proof: ValidityProofArgs;
  accountMeta: CompressedAccountMetaCloseArgs;
  settings: SettingsArgs;
};

export function getDecompressSettingsAccountInstructionDataEncoder(): Encoder<DecompressSettingsAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['proof', getValidityProofEncoder()],
      ['accountMeta', getCompressedAccountMetaCloseEncoder()],
      ['settings', getSettingsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DECOMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getDecompressSettingsAccountInstructionDataDecoder(): Decoder<DecompressSettingsAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['proof', getValidityProofDecoder()],
    ['accountMeta', getCompressedAccountMetaCloseDecoder()],
    ['settings', getSettingsDecoder()],
  ]);
}

export function getDecompressSettingsAccountInstructionDataCodec(): Codec<
  DecompressSettingsAccountInstructionDataArgs,
  DecompressSettingsAccountInstructionData
> {
  return combineCodec(
    getDecompressSettingsAccountInstructionDataEncoder(),
    getDecompressSettingsAccountInstructionDataDecoder()
  );
}

export type DecompressSettingsAccountAsyncInput<
  TAccountSettingsAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settingsAccount: Address<TAccountSettingsAccount>;
  payer?: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  proof: DecompressSettingsAccountInstructionDataArgs['proof'];
  accountMeta: DecompressSettingsAccountInstructionDataArgs['accountMeta'];
  settings: DecompressSettingsAccountInstructionDataArgs['settings'];
};

export async function getDecompressSettingsAccountInstructionAsync<
  TAccountSettingsAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: DecompressSettingsAccountAsyncInput<
    TAccountSettingsAccount,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DecompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettingsAccount,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settingsAccount: { value: input.settingsAccount ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.payer.value) {
    accounts.payer.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 117, 108, 116, 105, 95, 119, 97, 108, 108, 101, 116,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.settingsAccount.value)
        ),
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settingsAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDecompressSettingsAccountInstructionDataEncoder().encode(
      args as DecompressSettingsAccountInstructionDataArgs
    ),
  } as DecompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettingsAccount,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type DecompressSettingsAccountInput<
  TAccountSettingsAccount extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settingsAccount: Address<TAccountSettingsAccount>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  proof: DecompressSettingsAccountInstructionDataArgs['proof'];
  accountMeta: DecompressSettingsAccountInstructionDataArgs['accountMeta'];
  settings: DecompressSettingsAccountInstructionDataArgs['settings'];
};

export function getDecompressSettingsAccountInstruction<
  TAccountSettingsAccount extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: DecompressSettingsAccountInput<
    TAccountSettingsAccount,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DecompressSettingsAccountInstruction<
  TProgramAddress,
  TAccountSettingsAccount,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settingsAccount: { value: input.settingsAccount ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settingsAccount),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDecompressSettingsAccountInstructionDataEncoder().encode(
      args as DecompressSettingsAccountInstructionDataArgs
    ),
  } as DecompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettingsAccount,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDecompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settingsAccount: TAccountMetas[0];
    payer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: DecompressSettingsAccountInstructionData;
};

export function parseDecompressSettingsAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDecompressSettingsAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settingsAccount: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDecompressSettingsAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
