/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from "../types";

export const TRANSACTION_BUFFER_EXECUTE_DISCRIMINATOR = new Uint8Array([
  48, 73, 34, 19, 129, 99, 128, 73,
]);

export function getTransactionBufferExecuteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_BUFFER_EXECUTE_DISCRIMINATOR
  );
}

export type TransactionBufferExecuteInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountExecutor extends string | IAccountMeta<string> = string,
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountExecutor extends string
        ? ReadonlySignerAccount<TAccountExecutor> &
            IAccountSignerMeta<TAccountExecutor>
        : TAccountExecutor,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferExecuteInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
};

export type TransactionBufferExecuteInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
};

export function getTransactionBufferExecuteInstructionDataEncoder(): Encoder<TransactionBufferExecuteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_EXECUTE_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferExecuteInstructionDataDecoder(): Decoder<TransactionBufferExecuteInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
  ]);
}

export function getTransactionBufferExecuteInstructionDataCodec(): Codec<
  TransactionBufferExecuteInstructionDataArgs,
  TransactionBufferExecuteInstructionData
> {
  return combineCodec(
    getTransactionBufferExecuteInstructionDataEncoder(),
    getTransactionBufferExecuteInstructionDataDecoder()
  );
}

export type TransactionBufferExecuteInput<
  TAccountDomainConfig extends string = string,
  TAccountSettings extends string = string,
  TAccountExecutor extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  domainConfig?: Address<TAccountDomainConfig>;
  settings: Address<TAccountSettings>;
  executor?: TransactionSigner<TAccountExecutor>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  secp256r1VerifyArgs: TransactionBufferExecuteInstructionDataArgs["secp256r1VerifyArgs"];
};

export function getTransactionBufferExecuteInstruction<
  TAccountDomainConfig extends string,
  TAccountSettings extends string,
  TAccountExecutor extends string,
  TAccountTransactionBuffer extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionBufferExecuteInput<
    TAccountDomainConfig,
    TAccountSettings,
    TAccountExecutor,
    TAccountTransactionBuffer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferExecuteInstruction<
  TProgramAddress,
  TAccountDomainConfig,
  TAccountSettings,
  TAccountExecutor,
  TAccountTransactionBuffer,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    settings: { value: input.settings ?? null, isWritable: false },
    executor: { value: input.executor ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.executor),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
    ],
    programAddress,
    data: getTransactionBufferExecuteInstructionDataEncoder().encode(
      args as TransactionBufferExecuteInstructionDataArgs
    ),
  } as TransactionBufferExecuteInstruction<
    TProgramAddress,
    TAccountDomainConfig,
    TAccountSettings,
    TAccountExecutor,
    TAccountTransactionBuffer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >;

  return instruction;
}

export type ParsedTransactionBufferExecuteInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    domainConfig?: TAccountMetas[0] | undefined;
    settings: TAccountMetas[1];
    executor?: TAccountMetas[2] | undefined;
    transactionBuffer: TAccountMetas[3];
    slotHashSysvar?: TAccountMetas[4] | undefined;
    instructionsSysvar?: TAccountMetas[5] | undefined;
  };
  data: TransactionBufferExecuteInstructionData;
};

export function parseTransactionBufferExecuteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionBufferExecuteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      domainConfig: getNextOptionalAccount(),
      settings: getNextAccount(),
      executor: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferExecuteInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
