/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getConfigActionDecoder,
  getConfigActionEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSettingsMutArgsDecoder,
  getSettingsMutArgsEncoder,
  type ConfigAction,
  type ConfigActionArgs,
  type ProofArgs,
  type ProofArgsArgs,
  type SettingsMutArgs,
  type SettingsMutArgsArgs,
} from "../types";

export const CHANGE_CONFIG_COMPRESSED_DISCRIMINATOR = new Uint8Array([19]);

export function getChangeConfigCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CHANGE_CONFIG_COMPRESSED_DISCRIMINATOR
  );
}

export type ChangeConfigCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeConfigCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  configActions: Array<ConfigAction>;
  settingsMut: SettingsMutArgs;
  compressedProofArgs: ProofArgs;
};

export type ChangeConfigCompressedInstructionDataArgs = {
  configActions: Array<ConfigActionArgs>;
  settingsMut: SettingsMutArgsArgs;
  compressedProofArgs: ProofArgsArgs;
};

export function getChangeConfigCompressedInstructionDataEncoder(): Encoder<ChangeConfigCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["configActions", getArrayEncoder(getConfigActionEncoder())],
      ["settingsMut", getSettingsMutArgsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CHANGE_CONFIG_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getChangeConfigCompressedInstructionDataDecoder(): Decoder<ChangeConfigCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["configActions", getArrayDecoder(getConfigActionDecoder())],
    ["settingsMut", getSettingsMutArgsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
  ]);
}

export function getChangeConfigCompressedInstructionDataCodec(): Codec<
  ChangeConfigCompressedInstructionDataArgs,
  ChangeConfigCompressedInstructionData
> {
  return combineCodec(
    getChangeConfigCompressedInstructionDataEncoder(),
    getChangeConfigCompressedInstructionDataDecoder()
  );
}

export type ChangeConfigCompressedInput<
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = {
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  configActions: ChangeConfigCompressedInstructionDataArgs["configActions"];
  settingsMut: ChangeConfigCompressedInstructionDataArgs["settingsMut"];
  compressedProofArgs: ChangeConfigCompressedInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getChangeConfigCompressedInstruction<
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
>(
  input: ChangeConfigCompressedInput<
    TAccountPayer,
    TAccountAuthority,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeConfigCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountAuthority,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getChangeConfigCompressedInstructionDataEncoder().encode(
      args as ChangeConfigCompressedInstructionDataArgs
    ),
  } as ChangeConfigCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountAuthority,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedChangeConfigCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    authority: TAccountMetas[1];
    slotHashSysvar?: TAccountMetas[2] | undefined;
    instructionsSysvar?: TAccountMetas[3] | undefined;
  };
  data: ChangeConfigCompressedInstructionData;
};

export function parseChangeConfigCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedChangeConfigCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      authority: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getChangeConfigCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
