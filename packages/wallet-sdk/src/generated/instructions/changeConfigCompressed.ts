/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getConfigActionDecoder,
  getConfigActionEncoder,
  getSettingsArgsDecoder,
  getSettingsArgsEncoder,
  type ConfigAction,
  type ConfigActionArgs,
  type SettingsArgs,
  type SettingsArgsArgs,
} from '../types';

export const CHANGE_CONFIG_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  33, 185, 159, 154, 181, 251, 157, 58,
]);

export function getChangeConfigCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANGE_CONFIG_COMPRESSED_DISCRIMINATOR
  );
}

export type ChangeConfigCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeConfigCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  configActions: Array<ConfigAction>;
  settingsArgs: SettingsArgs;
};

export type ChangeConfigCompressedInstructionDataArgs = {
  configActions: Array<ConfigActionArgs>;
  settingsArgs: SettingsArgsArgs;
};

export function getChangeConfigCompressedInstructionDataEncoder(): Encoder<ChangeConfigCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['configActions', getArrayEncoder(getConfigActionEncoder())],
      ['settingsArgs', getSettingsArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CHANGE_CONFIG_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getChangeConfigCompressedInstructionDataDecoder(): Decoder<ChangeConfigCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['configActions', getArrayDecoder(getConfigActionDecoder())],
    ['settingsArgs', getSettingsArgsDecoder()],
  ]);
}

export function getChangeConfigCompressedInstructionDataCodec(): Codec<
  ChangeConfigCompressedInstructionDataArgs,
  ChangeConfigCompressedInstructionData
> {
  return combineCodec(
    getChangeConfigCompressedInstructionDataEncoder(),
    getChangeConfigCompressedInstructionDataDecoder()
  );
}

export type ChangeConfigCompressedInput<
  TAccountPayer extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  configActions: ChangeConfigCompressedInstructionDataArgs['configActions'];
  settingsArgs: ChangeConfigCompressedInstructionDataArgs['settingsArgs'];
};

export function getChangeConfigCompressedInstruction<
  TAccountPayer extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: ChangeConfigCompressedInput<
    TAccountPayer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeConfigCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
    ],
    programAddress,
    data: getChangeConfigCompressedInstructionDataEncoder().encode(
      args as ChangeConfigCompressedInstructionDataArgs
    ),
  } as ChangeConfigCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >;

  return instruction;
}

export type ParsedChangeConfigCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    slotHashSysvar?: TAccountMetas[1] | undefined;
    instructionsSysvar?: TAccountMetas[2] | undefined;
  };
  data: ChangeConfigCompressedInstructionData;
};

export function parseChangeConfigCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedChangeConfigCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getChangeConfigCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
