/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSettingsProofArgsDecoder,
  getSettingsProofArgsEncoder,
  type ProofArgs,
  type ProofArgsArgs,
  type SettingsProofArgs,
  type SettingsProofArgsArgs,
} from "../types";

export const TRANSACTION_BUFFER_EXTEND_COMPRESSED_DISCRIMINATOR =
  new Uint8Array([21, 112, 96, 97, 196, 102, 207, 203]);

export function getTransactionBufferExtendCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_BUFFER_EXTEND_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionBufferExtendCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferExtendCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  buffer: ReadonlyUint8Array;
  settingsArgs: SettingsProofArgs;
  compressedProofArgs: ProofArgs;
};

export type TransactionBufferExtendCompressedInstructionDataArgs = {
  buffer: ReadonlyUint8Array;
  settingsArgs: SettingsProofArgsArgs;
  compressedProofArgs: ProofArgsArgs;
};

export function getTransactionBufferExtendCompressedInstructionDataEncoder(): Encoder<TransactionBufferExtendCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["buffer", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ["settingsArgs", getSettingsProofArgsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_EXTEND_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferExtendCompressedInstructionDataDecoder(): Decoder<TransactionBufferExtendCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["buffer", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ["settingsArgs", getSettingsProofArgsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
  ]);
}

export function getTransactionBufferExtendCompressedInstructionDataCodec(): Codec<
  TransactionBufferExtendCompressedInstructionDataArgs,
  TransactionBufferExtendCompressedInstructionData
> {
  return combineCodec(
    getTransactionBufferExtendCompressedInstructionDataEncoder(),
    getTransactionBufferExtendCompressedInstructionDataDecoder()
  );
}

export type TransactionBufferExtendCompressedInput<
  TAccountPayer extends string = string,
  TAccountTransactionBuffer extends string = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = {
  payer: TransactionSigner<TAccountPayer>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  buffer: TransactionBufferExtendCompressedInstructionDataArgs["buffer"];
  settingsArgs: TransactionBufferExtendCompressedInstructionDataArgs["settingsArgs"];
  compressedProofArgs: TransactionBufferExtendCompressedInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getTransactionBufferExtendCompressedInstruction<
  TAccountPayer extends string,
  TAccountTransactionBuffer extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
>(
  input: TransactionBufferExtendCompressedInput<
    TAccountPayer,
    TAccountTransactionBuffer,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferExtendCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountTransactionBuffer,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transactionBuffer),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getTransactionBufferExtendCompressedInstructionDataEncoder().encode(
      args as TransactionBufferExtendCompressedInstructionDataArgs
    ),
  } as TransactionBufferExtendCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTransactionBuffer,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedTransactionBufferExtendCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    transactionBuffer: TAccountMetas[1];
  };
  data: TransactionBufferExtendCompressedInstructionData;
};

export function parseTransactionBufferExtendCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionBufferExtendCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      transactionBuffer: getNextAccount(),
    },
    data: getTransactionBufferExtendCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
