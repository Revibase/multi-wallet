/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSettingsArgsDecoder,
  getSettingsArgsEncoder,
  type SettingsArgs,
  type SettingsArgsArgs,
} from '../types';

export const TRANSACTION_BUFFER_EXTEND_COMPRESSED_DISCRIMINATOR =
  new Uint8Array([21, 112, 96, 97, 196, 102, 207, 203]);

export function getTransactionBufferExtendCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_BUFFER_EXTEND_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionBufferExtendCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferExtendCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  buffer: ReadonlyUint8Array;
  settingsArgs: SettingsArgs;
};

export type TransactionBufferExtendCompressedInstructionDataArgs = {
  buffer: ReadonlyUint8Array;
  settingsArgs: SettingsArgsArgs;
};

export function getTransactionBufferExtendCompressedInstructionDataEncoder(): Encoder<TransactionBufferExtendCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['buffer', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['settingsArgs', getSettingsArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_EXTEND_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferExtendCompressedInstructionDataDecoder(): Decoder<TransactionBufferExtendCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['buffer', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['settingsArgs', getSettingsArgsDecoder()],
  ]);
}

export function getTransactionBufferExtendCompressedInstructionDataCodec(): Codec<
  TransactionBufferExtendCompressedInstructionDataArgs,
  TransactionBufferExtendCompressedInstructionData
> {
  return combineCodec(
    getTransactionBufferExtendCompressedInstructionDataEncoder(),
    getTransactionBufferExtendCompressedInstructionDataDecoder()
  );
}

export type TransactionBufferExtendCompressedInput<
  TAccountTransactionBuffer extends string = string,
> = {
  transactionBuffer: Address<TAccountTransactionBuffer>;
  buffer: TransactionBufferExtendCompressedInstructionDataArgs['buffer'];
  settingsArgs: TransactionBufferExtendCompressedInstructionDataArgs['settingsArgs'];
};

export function getTransactionBufferExtendCompressedInstruction<
  TAccountTransactionBuffer extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionBufferExtendCompressedInput<TAccountTransactionBuffer>,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferExtendCompressedInstruction<
  TProgramAddress,
  TAccountTransactionBuffer
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.transactionBuffer)],
    programAddress,
    data: getTransactionBufferExtendCompressedInstructionDataEncoder().encode(
      args as TransactionBufferExtendCompressedInstructionDataArgs
    ),
  } as TransactionBufferExtendCompressedInstruction<
    TProgramAddress,
    TAccountTransactionBuffer
  >;

  return instruction;
}

export type ParsedTransactionBufferExtendCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    transactionBuffer: TAccountMetas[0];
  };
  data: TransactionBufferExtendCompressedInstructionData;
};

export function parseTransactionBufferExtendCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionBufferExtendCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      transactionBuffer: getNextAccount(),
    },
    data: getTransactionBufferExtendCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
