/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TRANSACTION_EXECUTE_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  60, 99, 11, 42, 178, 216, 28, 158,
]);

export function getTransactionExecuteCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_EXECUTE_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionExecuteCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableAccount<TAccountPayer>
        : TAccountPayer,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionExecuteCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  settingsKey: Address;
};

export type TransactionExecuteCompressedInstructionDataArgs = {
  settingsKey: Address;
};

export function getTransactionExecuteCompressedInstructionDataEncoder(): Encoder<TransactionExecuteCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['settingsKey', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_EXECUTE_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionExecuteCompressedInstructionDataDecoder(): Decoder<TransactionExecuteCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['settingsKey', getAddressDecoder()],
  ]);
}

export function getTransactionExecuteCompressedInstructionDataCodec(): Codec<
  TransactionExecuteCompressedInstructionDataArgs,
  TransactionExecuteCompressedInstructionData
> {
  return combineCodec(
    getTransactionExecuteCompressedInstructionDataEncoder(),
    getTransactionExecuteCompressedInstructionDataDecoder()
  );
}

export type TransactionExecuteCompressedInput<
  TAccountPayer extends string = string,
  TAccountTransactionBuffer extends string = string,
> = {
  payer: Address<TAccountPayer>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  settingsKey: TransactionExecuteCompressedInstructionDataArgs['settingsKey'];
};

export function getTransactionExecuteCompressedInstruction<
  TAccountPayer extends string,
  TAccountTransactionBuffer extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionExecuteCompressedInput<
    TAccountPayer,
    TAccountTransactionBuffer
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionExecuteCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountTransactionBuffer
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transactionBuffer),
    ],
    programAddress,
    data: getTransactionExecuteCompressedInstructionDataEncoder().encode(
      args as TransactionExecuteCompressedInstructionDataArgs
    ),
  } as TransactionExecuteCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTransactionBuffer
  >;

  return instruction;
}

export type ParsedTransactionExecuteCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    transactionBuffer: TAccountMetas[1];
  };
  data: TransactionExecuteCompressedInstructionData;
};

export function parseTransactionExecuteCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionExecuteCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      transactionBuffer: getNextAccount(),
    },
    data: getTransactionExecuteCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
