/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";
import {
  getConfigActionDecoder,
  getConfigActionEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  type ConfigAction,
  type ConfigActionArgs,
  type ProofArgs,
  type ProofArgsArgs,
} from "../types";

export const CHANGE_CONFIG_DISCRIMINATOR = new Uint8Array([8]);

export function getChangeConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CHANGE_CONFIG_DISCRIMINATOR
  );
}

export type ChangeConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  configActions: Array<ConfigAction>;
  compressedProofArgs: Option<ProofArgs>;
};

export type ChangeConfigInstructionDataArgs = {
  configActions: Array<ConfigActionArgs>;
  compressedProofArgs: OptionOrNullable<ProofArgsArgs>;
};

export function getChangeConfigInstructionDataEncoder(): Encoder<ChangeConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["configActions", getArrayEncoder(getConfigActionEncoder())],
      ["compressedProofArgs", getOptionEncoder(getProofArgsEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CHANGE_CONFIG_DISCRIMINATOR })
  );
}

export function getChangeConfigInstructionDataDecoder(): Decoder<ChangeConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["configActions", getArrayDecoder(getConfigActionDecoder())],
    ["compressedProofArgs", getOptionDecoder(getProofArgsDecoder())],
  ]);
}

export function getChangeConfigInstructionDataCodec(): Codec<
  ChangeConfigInstructionDataArgs,
  ChangeConfigInstructionData
> {
  return combineCodec(
    getChangeConfigInstructionDataEncoder(),
    getChangeConfigInstructionDataDecoder()
  );
}

export type ChangeConfigInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type ChangeConfigAsyncInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  authority?: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  configActions: ChangeConfigInstructionDataArgs["configActions"];
  compressedProofArgs: ChangeConfigInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: ChangeConfigInstructionExtraArgs["remainingAccounts"];
};

export async function getChangeConfigInstructionAsync<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: ChangeConfigAsyncInput<
    TAccountSettings,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ChangeConfigInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 117, 108, 116, 105, 95, 119, 97, 108, 108, 101, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.settings.value)),
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      ...remainingAccounts,
    ],
    data: getChangeConfigInstructionDataEncoder().encode(
      args as ChangeConfigInstructionDataArgs
    ),
    programAddress,
  } as ChangeConfigInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >);
}

export type ChangeConfigInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  configActions: ChangeConfigInstructionDataArgs["configActions"];
  compressedProofArgs: ChangeConfigInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: ChangeConfigInstructionExtraArgs["remainingAccounts"];
};

export function getChangeConfigInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: ChangeConfigInput<
    TAccountSettings,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeConfigInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      ...remainingAccounts,
    ],
    data: getChangeConfigInstructionDataEncoder().encode(
      args as ChangeConfigInstructionDataArgs
    ),
    programAddress,
  } as ChangeConfigInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >);
}

export type ParsedChangeConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    authority: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
    slotHashSysvar?: TAccountMetas[4] | undefined;
    instructionsSysvar?: TAccountMetas[5] | undefined;
  };
  data: ChangeConfigInstructionData;
};

export function parseChangeConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedChangeConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getChangeConfigInstructionDataDecoder().decode(instruction.data),
  };
}
