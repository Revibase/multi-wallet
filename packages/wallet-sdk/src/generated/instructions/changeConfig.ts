/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getConfigActionDecoder,
  getConfigActionEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type ConfigAction,
  type ConfigActionArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from "../types";

export const CHANGE_CONFIG_DISCRIMINATOR = new Uint8Array([
  24, 158, 114, 115, 94, 210, 244, 233,
]);

export function getChangeConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANGE_CONFIG_DISCRIMINATOR
  );
}

export type ChangeConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  configActions: Array<ConfigAction>;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
};

export type ChangeConfigInstructionDataArgs = {
  configActions: Array<ConfigActionArgs>;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
};

export function getChangeConfigInstructionDataEncoder(): Encoder<ChangeConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["configActions", getArrayEncoder(getConfigActionEncoder())],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: CHANGE_CONFIG_DISCRIMINATOR })
  );
}

export function getChangeConfigInstructionDataDecoder(): Decoder<ChangeConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["configActions", getArrayDecoder(getConfigActionDecoder())],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
  ]);
}

export function getChangeConfigInstructionDataCodec(): Codec<
  ChangeConfigInstructionDataArgs,
  ChangeConfigInstructionData
> {
  return combineCodec(
    getChangeConfigInstructionDataEncoder(),
    getChangeConfigInstructionDataDecoder()
  );
}

export type ChangeConfigInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  configActions: ChangeConfigInstructionDataArgs["configActions"];
  secp256r1VerifyArgs: ChangeConfigInstructionDataArgs["secp256r1VerifyArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getChangeConfigInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
>(
  input: ChangeConfigInput<
    TAccountSettings,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeConfigInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TAccountDomainConfig,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getChangeConfigInstructionDataEncoder().encode(
      args as ChangeConfigInstructionDataArgs
    ),
  } as ChangeConfigInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedChangeConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    slotHashSysvar?: TAccountMetas[3] | undefined;
    instructionsSysvar: TAccountMetas[4];
    domainConfig?: TAccountMetas[5] | undefined;
  };
  data: ChangeConfigInstructionData;
};

export function parseChangeConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedChangeConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
    },
    data: getChangeConfigInstructionDataDecoder().decode(instruction.data),
  };
}
