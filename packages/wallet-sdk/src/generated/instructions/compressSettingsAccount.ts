/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsCreationArgsDecoder,
  getSettingsCreationArgsEncoder,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsCreationArgs,
  type SettingsCreationArgsArgs,
} from "../types";

export const COMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  107, 157, 58, 253, 4, 163, 46, 145,
]);

export function getCompressSettingsAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR
  );
}

export type CompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type CompressSettingsAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  compressedProofArgs: ProofArgs;
  settingsCreationArgs: SettingsCreationArgs;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
};

export type CompressSettingsAccountInstructionDataArgs = {
  compressedProofArgs: ProofArgsArgs;
  settingsCreationArgs: SettingsCreationArgsArgs;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
};

export function getCompressSettingsAccountInstructionDataEncoder(): Encoder<CompressSettingsAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["compressedProofArgs", getProofArgsEncoder()],
      ["settingsCreationArgs", getSettingsCreationArgsEncoder()],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: COMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getCompressSettingsAccountInstructionDataDecoder(): Decoder<CompressSettingsAccountInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["compressedProofArgs", getProofArgsDecoder()],
    ["settingsCreationArgs", getSettingsCreationArgsDecoder()],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
  ]);
}

export function getCompressSettingsAccountInstructionDataCodec(): Codec<
  CompressSettingsAccountInstructionDataArgs,
  CompressSettingsAccountInstructionData
> {
  return combineCodec(
    getCompressSettingsAccountInstructionDataEncoder(),
    getCompressSettingsAccountInstructionDataDecoder()
  );
}

export type CompressSettingsAccountInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  compressedProofArgs: CompressSettingsAccountInstructionDataArgs["compressedProofArgs"];
  settingsCreationArgs: CompressSettingsAccountInstructionDataArgs["settingsCreationArgs"];
  secp256r1VerifyArgs: CompressSettingsAccountInstructionDataArgs["secp256r1VerifyArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getCompressSettingsAccountInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountSlotHashSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
>(
  input: CompressSettingsAccountInput<
    TAccountSettings,
    TAccountPayer,
    TAccountSlotHashSysvar,
    TAccountDomainConfig,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): CompressSettingsAccountInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountSlotHashSysvar,
  TAccountDomainConfig,
  TAccountInstructionsSysvar,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.instructionsSysvar),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getCompressSettingsAccountInstructionDataEncoder().encode(
      args as CompressSettingsAccountInstructionDataArgs
    ),
  } as CompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountSlotHashSysvar,
    TAccountDomainConfig,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedCompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    slotHashSysvar?: TAccountMetas[2] | undefined;
    domainConfig?: TAccountMetas[3] | undefined;
    instructionsSysvar: TAccountMetas[4];
  };
  data: CompressSettingsAccountInstructionData;
};

export function parseCompressSettingsAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCompressSettingsAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      domainConfig: getNextOptionalAccount(),
      instructionsSysvar: getNextAccount(),
    },
    data: getCompressSettingsAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
