/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getPackedAddressTreeInfoDecoder,
  getPackedAddressTreeInfoEncoder,
  getValidityProofDecoder,
  getValidityProofEncoder,
  type PackedAddressTreeInfo,
  type PackedAddressTreeInfoArgs,
  type ValidityProof,
  type ValidityProofArgs,
} from '../types';

export const COMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  107, 157, 58, 253, 4, 163, 46, 145,
]);

export function getCompressSettingsAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR
  );
}

export type CompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountRentCollector extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRentCollector extends string
        ? WritableAccount<TAccountRentCollector>
        : TAccountRentCollector,
      ...TRemainingAccounts,
    ]
  >;

export type CompressSettingsAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  proof: ValidityProof;
  addressTreeInfo: PackedAddressTreeInfo;
  outputStateTreeIndex: number;
};

export type CompressSettingsAccountInstructionDataArgs = {
  proof: ValidityProofArgs;
  addressTreeInfo: PackedAddressTreeInfoArgs;
  outputStateTreeIndex: number;
};

export function getCompressSettingsAccountInstructionDataEncoder(): Encoder<CompressSettingsAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['proof', getValidityProofEncoder()],
      ['addressTreeInfo', getPackedAddressTreeInfoEncoder()],
      ['outputStateTreeIndex', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: COMPRESS_SETTINGS_ACCOUNT_DISCRIMINATOR,
    })
  );
}

export function getCompressSettingsAccountInstructionDataDecoder(): Decoder<CompressSettingsAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['proof', getValidityProofDecoder()],
    ['addressTreeInfo', getPackedAddressTreeInfoDecoder()],
    ['outputStateTreeIndex', getU8Decoder()],
  ]);
}

export function getCompressSettingsAccountInstructionDataCodec(): Codec<
  CompressSettingsAccountInstructionDataArgs,
  CompressSettingsAccountInstructionData
> {
  return combineCodec(
    getCompressSettingsAccountInstructionDataEncoder(),
    getCompressSettingsAccountInstructionDataDecoder()
  );
}

export type CompressSettingsAccountAsyncInput<
  TAccountSettings extends string = string,
  TAccountAuthority extends string = string,
  TAccountRentCollector extends string = string,
> = {
  settings: Address<TAccountSettings>;
  authority?: TransactionSigner<TAccountAuthority>;
  rentCollector: Address<TAccountRentCollector>;
  proof: CompressSettingsAccountInstructionDataArgs['proof'];
  addressTreeInfo: CompressSettingsAccountInstructionDataArgs['addressTreeInfo'];
  outputStateTreeIndex: CompressSettingsAccountInstructionDataArgs['outputStateTreeIndex'];
};

export async function getCompressSettingsAccountInstructionAsync<
  TAccountSettings extends string,
  TAccountAuthority extends string,
  TAccountRentCollector extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CompressSettingsAccountAsyncInput<
    TAccountSettings,
    TAccountAuthority,
    TAccountRentCollector
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountAuthority,
    TAccountRentCollector
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    rentCollector: { value: input.rentCollector ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.authority.value) {
    accounts.authority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 117, 108, 116, 105, 95, 119, 97, 108, 108, 101, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.settings.value)),
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rentCollector),
    ],
    programAddress,
    data: getCompressSettingsAccountInstructionDataEncoder().encode(
      args as CompressSettingsAccountInstructionDataArgs
    ),
  } as CompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountAuthority,
    TAccountRentCollector
  >;

  return instruction;
}

export type CompressSettingsAccountInput<
  TAccountSettings extends string = string,
  TAccountAuthority extends string = string,
  TAccountRentCollector extends string = string,
> = {
  settings: Address<TAccountSettings>;
  authority: TransactionSigner<TAccountAuthority>;
  rentCollector: Address<TAccountRentCollector>;
  proof: CompressSettingsAccountInstructionDataArgs['proof'];
  addressTreeInfo: CompressSettingsAccountInstructionDataArgs['addressTreeInfo'];
  outputStateTreeIndex: CompressSettingsAccountInstructionDataArgs['outputStateTreeIndex'];
};

export function getCompressSettingsAccountInstruction<
  TAccountSettings extends string,
  TAccountAuthority extends string,
  TAccountRentCollector extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CompressSettingsAccountInput<
    TAccountSettings,
    TAccountAuthority,
    TAccountRentCollector
  >,
  config?: { programAddress?: TProgramAddress }
): CompressSettingsAccountInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountAuthority,
  TAccountRentCollector
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    rentCollector: { value: input.rentCollector ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.rentCollector),
    ],
    programAddress,
    data: getCompressSettingsAccountInstructionDataEncoder().encode(
      args as CompressSettingsAccountInstructionDataArgs
    ),
  } as CompressSettingsAccountInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountAuthority,
    TAccountRentCollector
  >;

  return instruction;
}

export type ParsedCompressSettingsAccountInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    authority: TAccountMetas[1];
    rentCollector: TAccountMetas[2];
  };
  data: CompressSettingsAccountInstructionData;
};

export function parseCompressSettingsAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCompressSettingsAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      authority: getNextAccount(),
      rentCollector: getNextAccount(),
    },
    data: getCompressSettingsAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
