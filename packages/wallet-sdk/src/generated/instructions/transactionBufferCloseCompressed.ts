/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsProofArgsDecoder,
  getSettingsProofArgsEncoder,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsProofArgs,
  type SettingsProofArgsArgs,
} from "../types";

export const TRANSACTION_BUFFER_CLOSE_COMPRESSED_DISCRIMINATOR = new Uint8Array(
  [82, 65, 25, 49, 208, 28, 191, 84]
);

export function getTransactionBufferCloseCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_BUFFER_CLOSE_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionBufferCloseCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountRentCollector extends string | IAccountMeta<string> = string,
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TAccountCloser extends string | IAccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountRentCollector extends string
        ? WritableAccount<TAccountRentCollector>
        : TAccountRentCollector,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountCloser extends string
        ? ReadonlySignerAccount<TAccountCloser> &
            IAccountSignerMeta<TAccountCloser>
        : TAccountCloser,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferCloseCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  settingsArgs: SettingsProofArgs;
  compressedProofArgs: ProofArgs;
};

export type TransactionBufferCloseCompressedInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  settingsArgs: SettingsProofArgsArgs;
  compressedProofArgs: ProofArgsArgs;
};

export function getTransactionBufferCloseCompressedInstructionDataEncoder(): Encoder<TransactionBufferCloseCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["settingsArgs", getSettingsProofArgsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_CLOSE_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferCloseCompressedInstructionDataDecoder(): Decoder<TransactionBufferCloseCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["settingsArgs", getSettingsProofArgsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
  ]);
}

export function getTransactionBufferCloseCompressedInstructionDataCodec(): Codec<
  TransactionBufferCloseCompressedInstructionDataArgs,
  TransactionBufferCloseCompressedInstructionData
> {
  return combineCodec(
    getTransactionBufferCloseCompressedInstructionDataEncoder(),
    getTransactionBufferCloseCompressedInstructionDataDecoder()
  );
}

export type TransactionBufferCloseCompressedInput<
  TAccountPayer extends string = string,
  TAccountRentCollector extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountCloser extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = {
  payer: TransactionSigner<TAccountPayer>;
  rentCollector: Address<TAccountRentCollector>;
  domainConfig?: Address<TAccountDomainConfig>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  closer?: TransactionSigner<TAccountCloser>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  secp256r1VerifyArgs: TransactionBufferCloseCompressedInstructionDataArgs["secp256r1VerifyArgs"];
  settingsArgs: TransactionBufferCloseCompressedInstructionDataArgs["settingsArgs"];
  compressedProofArgs: TransactionBufferCloseCompressedInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getTransactionBufferCloseCompressedInstruction<
  TAccountPayer extends string,
  TAccountRentCollector extends string,
  TAccountDomainConfig extends string,
  TAccountTransactionBuffer extends string,
  TAccountCloser extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
>(
  input: TransactionBufferCloseCompressedInput<
    TAccountPayer,
    TAccountRentCollector,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCloser,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferCloseCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountRentCollector,
  TAccountDomainConfig,
  TAccountTransactionBuffer,
  TAccountCloser,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    rentCollector: { value: input.rentCollector ?? null, isWritable: true },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    closer: { value: input.closer ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.rentCollector),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.closer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getTransactionBufferCloseCompressedInstructionDataEncoder().encode(
      args as TransactionBufferCloseCompressedInstructionDataArgs
    ),
  } as TransactionBufferCloseCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountRentCollector,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCloser,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedTransactionBufferCloseCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    rentCollector: TAccountMetas[1];
    domainConfig?: TAccountMetas[2] | undefined;
    transactionBuffer: TAccountMetas[3];
    closer?: TAccountMetas[4] | undefined;
    slotHashSysvar?: TAccountMetas[5] | undefined;
    instructionsSysvar?: TAccountMetas[6] | undefined;
  };
  data: TransactionBufferCloseCompressedInstructionData;
};

export function parseTransactionBufferCloseCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionBufferCloseCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      rentCollector: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      closer: getNextOptionalAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferCloseCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
