/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getDelegateCreationArgsDecoder,
  getDelegateCreationArgsEncoder,
  getPermissionsDecoder,
  getPermissionsEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsCreationArgsDecoder,
  getSettingsCreationArgsEncoder,
  type DelegateCreationArgs,
  type DelegateCreationArgsArgs,
  type IPermissions,
  type PermissionsArgs,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsCreationArgs,
  type SettingsCreationArgsArgs,
} from "../types";

export const CREATE_MULTI_WALLET_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  79, 254, 201, 17, 187, 210, 128, 233,
]);

export function getCreateMultiWalletCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_MULTI_WALLET_COMPRESSED_DISCRIMINATOR
  );
}

export type CreateMultiWalletCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountInitialMember extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountGlobalCounter extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountInitialMember extends string
        ? ReadonlySignerAccount<TAccountInitialMember> &
            IAccountSignerMeta<TAccountInitialMember>
        : TAccountInitialMember,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountGlobalCounter extends string
        ? WritableAccount<TAccountGlobalCounter>
        : TAccountGlobalCounter,
      ...TRemainingAccounts,
    ]
  >;

export type CreateMultiWalletCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  permissions: IPermissions;
  compressedProofArgs: ProofArgs;
  settingsCreationArgs: SettingsCreationArgs;
  delegateCreationArgs: Option<DelegateCreationArgs>;
};

export type CreateMultiWalletCompressedInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  permissions: PermissionsArgs;
  compressedProofArgs: ProofArgsArgs;
  settingsCreationArgs: SettingsCreationArgsArgs;
  delegateCreationArgs: OptionOrNullable<DelegateCreationArgsArgs>;
};

export function getCreateMultiWalletCompressedInstructionDataEncoder(): Encoder<CreateMultiWalletCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["permissions", getPermissionsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
      ["settingsCreationArgs", getSettingsCreationArgsEncoder()],
      [
        "delegateCreationArgs",
        getOptionEncoder(getDelegateCreationArgsEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_MULTI_WALLET_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getCreateMultiWalletCompressedInstructionDataDecoder(): Decoder<CreateMultiWalletCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["permissions", getPermissionsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
    ["settingsCreationArgs", getSettingsCreationArgsDecoder()],
    [
      "delegateCreationArgs",
      getOptionDecoder(getDelegateCreationArgsDecoder()),
    ],
  ]);
}

export function getCreateMultiWalletCompressedInstructionDataCodec(): Codec<
  CreateMultiWalletCompressedInstructionDataArgs,
  CreateMultiWalletCompressedInstructionData
> {
  return combineCodec(
    getCreateMultiWalletCompressedInstructionDataEncoder(),
    getCreateMultiWalletCompressedInstructionDataDecoder()
  );
}

export type CreateMultiWalletCompressedInput<
  TAccountPayer extends string = string,
  TAccountInitialMember extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountGlobalCounter extends string = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = {
  payer: TransactionSigner<TAccountPayer>;
  initialMember?: TransactionSigner<TAccountInitialMember>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  globalCounter: Address<TAccountGlobalCounter>;
  secp256r1VerifyArgs: CreateMultiWalletCompressedInstructionDataArgs["secp256r1VerifyArgs"];
  permissions: CreateMultiWalletCompressedInstructionDataArgs["permissions"];
  compressedProofArgs: CreateMultiWalletCompressedInstructionDataArgs["compressedProofArgs"];
  settingsCreationArgs: CreateMultiWalletCompressedInstructionDataArgs["settingsCreationArgs"];
  delegateCreationArgs: CreateMultiWalletCompressedInstructionDataArgs["delegateCreationArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getCreateMultiWalletCompressedInstruction<
  TAccountPayer extends string,
  TAccountInitialMember extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountGlobalCounter extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
>(
  input: CreateMultiWalletCompressedInput<
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): CreateMultiWalletCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountInitialMember,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TAccountDomainConfig,
  TAccountGlobalCounter,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    initialMember: { value: input.initialMember ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    globalCounter: { value: input.globalCounter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.initialMember),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.globalCounter),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getCreateMultiWalletCompressedInstructionDataEncoder().encode(
      args as CreateMultiWalletCompressedInstructionDataArgs
    ),
  } as CreateMultiWalletCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedCreateMultiWalletCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    initialMember?: TAccountMetas[1] | undefined;
    systemProgram: TAccountMetas[2];
    slotHashSysvar?: TAccountMetas[3] | undefined;
    instructionsSysvar?: TAccountMetas[4] | undefined;
    domainConfig?: TAccountMetas[5] | undefined;
    globalCounter: TAccountMetas[6];
  };
  data: CreateMultiWalletCompressedInstructionData;
};

export function parseCreateMultiWalletCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateMultiWalletCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      initialMember: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
      domainConfig: getNextOptionalAccount(),
      globalCounter: getNextAccount(),
    },
    data: getCreateMultiWalletCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
