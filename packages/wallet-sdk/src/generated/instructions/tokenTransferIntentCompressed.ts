/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsArgsDecoder,
  getSettingsArgsEncoder,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsArgs,
  type SettingsArgsArgs,
} from '../types';

export const TOKEN_TRANSFER_INTENT_COMPRESSED_DISCRIMINATOR = new Uint8Array([
  42, 48, 107, 147, 228, 201, 67, 173,
]);

export function getTokenTransferIntentCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TOKEN_TRANSFER_INTENT_COMPRESSED_DISCRIMINATOR
  );
}

export type TokenTransferIntentCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountSource extends string | IAccountMeta<string> = string,
  TAccountSourceTokenAccount extends string | IAccountMeta<string> = string,
  TAccountDestination extends string | IAccountMeta<string> = string,
  TAccountDestinationTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountSource extends string
        ? WritableAccount<TAccountSource>
        : TAccountSource,
      TAccountSourceTokenAccount extends string
        ? WritableAccount<TAccountSourceTokenAccount>
        : TAccountSourceTokenAccount,
      TAccountDestination extends string
        ? ReadonlyAccount<TAccountDestination>
        : TAccountDestination,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TokenTransferIntentCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  settingsArgs: SettingsArgs;
};

export type TokenTransferIntentCompressedInstructionDataArgs = {
  amount: number | bigint;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  settingsArgs: SettingsArgsArgs;
};

export function getTokenTransferIntentCompressedInstructionDataEncoder(): Encoder<TokenTransferIntentCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      [
        'secp256r1VerifyArgs',
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ['settingsArgs', getSettingsArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TOKEN_TRANSFER_INTENT_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTokenTransferIntentCompressedInstructionDataDecoder(): Decoder<TokenTransferIntentCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['secp256r1VerifyArgs', getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ['settingsArgs', getSettingsArgsDecoder()],
  ]);
}

export function getTokenTransferIntentCompressedInstructionDataCodec(): Codec<
  TokenTransferIntentCompressedInstructionDataArgs,
  TokenTransferIntentCompressedInstructionData
> {
  return combineCodec(
    getTokenTransferIntentCompressedInstructionDataEncoder(),
    getTokenTransferIntentCompressedInstructionDataDecoder()
  );
}

export type TokenTransferIntentCompressedAsyncInput<
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountSource extends string = string,
  TAccountSourceTokenAccount extends string = string,
  TAccountDestination extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  source: Address<TAccountSource>;
  sourceTokenAccount?: Address<TAccountSourceTokenAccount>;
  destination: Address<TAccountDestination>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  amount: TokenTransferIntentCompressedInstructionDataArgs['amount'];
  secp256r1VerifyArgs: TokenTransferIntentCompressedInstructionDataArgs['secp256r1VerifyArgs'];
  settingsArgs: TokenTransferIntentCompressedInstructionDataArgs['settingsArgs'];
};

export async function getTokenTransferIntentCompressedInstructionAsync<
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountSource extends string,
  TAccountSourceTokenAccount extends string,
  TAccountDestination extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TokenTransferIntentCompressedAsyncInput<
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TokenTransferIntentCompressedInstruction<
    TProgramAddress,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    source: { value: input.source ?? null, isWritable: true },
    sourceTokenAccount: {
      value: input.sourceTokenAccount ?? null,
      isWritable: true,
    },
    destination: { value: input.destination ?? null, isWritable: false },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.sourceTokenAccount.value) {
    accounts.sourceTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.source.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.sourceTokenAccount),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getTokenTransferIntentCompressedInstructionDataEncoder().encode(
      args as TokenTransferIntentCompressedInstructionDataArgs
    ),
  } as TokenTransferIntentCompressedInstruction<
    TProgramAddress,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type TokenTransferIntentCompressedInput<
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountSource extends string = string,
  TAccountSourceTokenAccount extends string = string,
  TAccountDestination extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  source: Address<TAccountSource>;
  sourceTokenAccount: Address<TAccountSourceTokenAccount>;
  destination: Address<TAccountDestination>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  amount: TokenTransferIntentCompressedInstructionDataArgs['amount'];
  secp256r1VerifyArgs: TokenTransferIntentCompressedInstructionDataArgs['secp256r1VerifyArgs'];
  settingsArgs: TokenTransferIntentCompressedInstructionDataArgs['settingsArgs'];
};

export function getTokenTransferIntentCompressedInstruction<
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountSource extends string,
  TAccountSourceTokenAccount extends string,
  TAccountDestination extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TokenTransferIntentCompressedInput<
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TokenTransferIntentCompressedInstruction<
  TProgramAddress,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TAccountDomainConfig,
  TAccountSource,
  TAccountSourceTokenAccount,
  TAccountDestination,
  TAccountDestinationTokenAccount,
  TAccountTokenProgram,
  TAccountMint,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    source: { value: input.source ?? null, isWritable: true },
    sourceTokenAccount: {
      value: input.sourceTokenAccount ?? null,
      isWritable: true,
    },
    destination: { value: input.destination ?? null, isWritable: false },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.sourceTokenAccount),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getTokenTransferIntentCompressedInstructionDataEncoder().encode(
      args as TokenTransferIntentCompressedInstructionDataArgs
    ),
  } as TokenTransferIntentCompressedInstruction<
    TProgramAddress,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedTokenTransferIntentCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    slotHashSysvar?: TAccountMetas[0] | undefined;
    instructionsSysvar: TAccountMetas[1];
    domainConfig?: TAccountMetas[2] | undefined;
    source: TAccountMetas[3];
    sourceTokenAccount: TAccountMetas[4];
    destination: TAccountMetas[5];
    destinationTokenAccount: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    mint: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
  };
  data: TokenTransferIntentCompressedInstructionData;
};

export function parseTokenTransferIntentCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTokenTransferIntentCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
      source: getNextAccount(),
      sourceTokenAccount: getNextAccount(),
      destination: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getTokenTransferIntentCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
