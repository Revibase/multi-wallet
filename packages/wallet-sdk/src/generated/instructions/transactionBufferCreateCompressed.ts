/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsReadonlyArgsDecoder,
  getSettingsReadonlyArgsEncoder,
  getTransactionBufferCreateArgsDecoder,
  getTransactionBufferCreateArgsEncoder,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsReadonlyArgs,
  type SettingsReadonlyArgsArgs,
  type TransactionBufferCreateArgs,
  type TransactionBufferCreateArgsArgs,
} from "../types";

export const TRANSACTION_BUFFER_CREATE_COMPRESSED_DISCRIMINATOR =
  new Uint8Array([20]);

export function getTransactionBufferCreateCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    TRANSACTION_BUFFER_CREATE_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionBufferCreateCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountTransactionBuffer extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferCreateCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: TransactionBufferCreateArgs;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  settingsReadonly: SettingsReadonlyArgs;
  compressedProofArgs: ProofArgs;
};

export type TransactionBufferCreateCompressedInstructionDataArgs = {
  args: TransactionBufferCreateArgsArgs;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  settingsReadonly: SettingsReadonlyArgsArgs;
  compressedProofArgs: ProofArgsArgs;
};

export function getTransactionBufferCreateCompressedInstructionDataEncoder(): Encoder<TransactionBufferCreateCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["args", getTransactionBufferCreateArgsEncoder()],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["settingsReadonly", getSettingsReadonlyArgsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_CREATE_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferCreateCompressedInstructionDataDecoder(): Decoder<TransactionBufferCreateCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["args", getTransactionBufferCreateArgsDecoder()],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["settingsReadonly", getSettingsReadonlyArgsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
  ]);
}

export function getTransactionBufferCreateCompressedInstructionDataCodec(): Codec<
  TransactionBufferCreateCompressedInstructionDataArgs,
  TransactionBufferCreateCompressedInstructionData
> {
  return combineCodec(
    getTransactionBufferCreateCompressedInstructionDataEncoder(),
    getTransactionBufferCreateCompressedInstructionDataDecoder()
  );
}

export type TransactionBufferCreateCompressedInput<
  TAccountPayer extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = {
  payer: TransactionSigner<TAccountPayer>;
  domainConfig?: Address<TAccountDomainConfig>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  creator?: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  args: TransactionBufferCreateCompressedInstructionDataArgs["args"];
  secp256r1VerifyArgs: TransactionBufferCreateCompressedInstructionDataArgs["secp256r1VerifyArgs"];
  settingsReadonly: TransactionBufferCreateCompressedInstructionDataArgs["settingsReadonly"];
  compressedProofArgs: TransactionBufferCreateCompressedInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getTransactionBufferCreateCompressedInstruction<
  TAccountPayer extends string,
  TAccountDomainConfig extends string,
  TAccountTransactionBuffer extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountInstructionsSysvar extends string,
  TAccountSlotHashSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
>(
  input: TransactionBufferCreateCompressedInput<
    TAccountPayer,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountInstructionsSysvar,
    TAccountSlotHashSysvar,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferCreateCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountDomainConfig,
  TAccountTransactionBuffer,
  TAccountCreator,
  TAccountSystemProgram,
  TAccountInstructionsSysvar,
  TAccountSlotHashSysvar,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    creator: { value: input.creator ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.slotHashSysvar),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getTransactionBufferCreateCompressedInstructionDataEncoder().encode(
      args as TransactionBufferCreateCompressedInstructionDataArgs
    ),
  } as TransactionBufferCreateCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountInstructionsSysvar,
    TAccountSlotHashSysvar,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedTransactionBufferCreateCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    domainConfig?: TAccountMetas[1] | undefined;
    transactionBuffer: TAccountMetas[2];
    creator?: TAccountMetas[3] | undefined;
    systemProgram: TAccountMetas[4];
    instructionsSysvar: TAccountMetas[5];
    slotHashSysvar?: TAccountMetas[6] | undefined;
  };
  data: TransactionBufferCreateCompressedInstructionData;
};

export function parseTransactionBufferCreateCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransactionBufferCreateCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      creator: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      instructionsSysvar: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferCreateCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
