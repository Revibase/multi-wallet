/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from "../types";

export const TRANSACTION_BUFFER_CREATE_DISCRIMINATOR = new Uint8Array([
  245, 201, 113, 108, 37, 63, 29, 89,
]);

export function getTransactionBufferCreateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_BUFFER_CREATE_DISCRIMINATOR
  );
}

export type TransactionBufferCreateInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferCreateInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Allow execution without sigverify */
  permissionlessExecution: boolean;
  /** Buffer hashes for the subsequent extend instruction */
  bufferExtendHashes: Array<ReadonlyUint8Array>;
  /** Index of the buffer account to seed the account derivation */
  bufferIndex: number;
  /** Hash of the final assembled transaction message. */
  finalBufferHash: ReadonlyUint8Array;
  /** Final size of the buffer. */
  finalBufferSize: number;
  /** Initial slice of the buffer. */
  buffer: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
};

export type TransactionBufferCreateInstructionDataArgs = {
  /** Allow execution without sigverify */
  permissionlessExecution: boolean;
  /** Buffer hashes for the subsequent extend instruction */
  bufferExtendHashes: Array<ReadonlyUint8Array>;
  /** Index of the buffer account to seed the account derivation */
  bufferIndex: number;
  /** Hash of the final assembled transaction message. */
  finalBufferHash: ReadonlyUint8Array;
  /** Final size of the buffer. */
  finalBufferSize: number;
  /** Initial slice of the buffer. */
  buffer: ReadonlyUint8Array;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
};

export function getTransactionBufferCreateInstructionDataEncoder(): Encoder<TransactionBufferCreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["permissionlessExecution", getBooleanEncoder()],
      [
        "bufferExtendHashes",
        getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32)),
      ],
      ["bufferIndex", getU8Encoder()],
      ["finalBufferHash", fixEncoderSize(getBytesEncoder(), 32)],
      ["finalBufferSize", getU16Encoder()],
      ["buffer", addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_CREATE_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferCreateInstructionDataDecoder(): Decoder<TransactionBufferCreateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["permissionlessExecution", getBooleanDecoder()],
    [
      "bufferExtendHashes",
      getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32)),
    ],
    ["bufferIndex", getU8Decoder()],
    ["finalBufferHash", fixDecoderSize(getBytesDecoder(), 32)],
    ["finalBufferSize", getU16Decoder()],
    ["buffer", addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
  ]);
}

export function getTransactionBufferCreateInstructionDataCodec(): Codec<
  TransactionBufferCreateInstructionDataArgs,
  TransactionBufferCreateInstructionData
> {
  return combineCodec(
    getTransactionBufferCreateInstructionDataEncoder(),
    getTransactionBufferCreateInstructionDataDecoder()
  );
}

export type TransactionBufferCreateInput<
  TAccountSettings extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountCreator extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountSlotHashSysvar extends string = string,
> = {
  settings: Address<TAccountSettings>;
  domainConfig?: Address<TAccountDomainConfig>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  creator?: TransactionSigner<TAccountCreator>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  permissionlessExecution: TransactionBufferCreateInstructionDataArgs["permissionlessExecution"];
  bufferExtendHashes: TransactionBufferCreateInstructionDataArgs["bufferExtendHashes"];
  bufferIndex: TransactionBufferCreateInstructionDataArgs["bufferIndex"];
  finalBufferHash: TransactionBufferCreateInstructionDataArgs["finalBufferHash"];
  finalBufferSize: TransactionBufferCreateInstructionDataArgs["finalBufferSize"];
  buffer: TransactionBufferCreateInstructionDataArgs["buffer"];
  secp256r1VerifyArgs: TransactionBufferCreateInstructionDataArgs["secp256r1VerifyArgs"];
};

export function getTransactionBufferCreateInstruction<
  TAccountSettings extends string,
  TAccountDomainConfig extends string,
  TAccountTransactionBuffer extends string,
  TAccountCreator extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountInstructionsSysvar extends string,
  TAccountSlotHashSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionBufferCreateInput<
    TAccountSettings,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCreator,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountInstructionsSysvar,
    TAccountSlotHashSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferCreateInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountDomainConfig,
  TAccountTransactionBuffer,
  TAccountCreator,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountInstructionsSysvar,
  TAccountSlotHashSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    creator: { value: input.creator ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.slotHashSysvar),
    ],
    programAddress,
    data: getTransactionBufferCreateInstructionDataEncoder().encode(
      args as TransactionBufferCreateInstructionDataArgs
    ),
  } as TransactionBufferCreateInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCreator,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountInstructionsSysvar,
    TAccountSlotHashSysvar
  >;

  return instruction;
}

export type ParsedTransactionBufferCreateInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    domainConfig?: TAccountMetas[1] | undefined;
    transactionBuffer: TAccountMetas[2];
    creator?: TAccountMetas[3] | undefined;
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    instructionsSysvar: TAccountMetas[6];
    slotHashSysvar?: TAccountMetas[7] | undefined;
  };
  data: TransactionBufferCreateInstructionData;
};

export function parseTransactionBufferCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionBufferCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      creator: getNextOptionalAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      instructionsSysvar: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferCreateInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
