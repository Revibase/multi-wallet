/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DISABLE_DOMAIN_CONFIG_DISCRIMINATOR = new Uint8Array([3]);

export function getDisableDomainConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    DISABLE_DOMAIN_CONFIG_DISCRIMINATOR
  );
}

export type DisableDomainConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountAdmin extends
    | string
    | AccountMeta<string> = 'G6kBnedts6uAivtY72ToaFHBs1UVbT9udiXmQZgMEjoF',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDomainConfig extends string
        ? WritableAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type DisableDomainConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  disable: boolean;
};

export type DisableDomainConfigInstructionDataArgs = { disable: boolean };

export function getDisableDomainConfigInstructionDataEncoder(): FixedSizeEncoder<DisableDomainConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['disable', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: DISABLE_DOMAIN_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getDisableDomainConfigInstructionDataDecoder(): FixedSizeDecoder<DisableDomainConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['disable', getBooleanDecoder()],
  ]);
}

export function getDisableDomainConfigInstructionDataCodec(): FixedSizeCodec<
  DisableDomainConfigInstructionDataArgs,
  DisableDomainConfigInstructionData
> {
  return combineCodec(
    getDisableDomainConfigInstructionDataEncoder(),
    getDisableDomainConfigInstructionDataDecoder()
  );
}

export type DisableDomainConfigInput<
  TAccountDomainConfig extends string = string,
  TAccountAdmin extends string = string,
> = {
  domainConfig: Address<TAccountDomainConfig>;
  admin?: TransactionSigner<TAccountAdmin>;
  disable: DisableDomainConfigInstructionDataArgs['disable'];
};

export function getDisableDomainConfigInstruction<
  TAccountDomainConfig extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: DisableDomainConfigInput<TAccountDomainConfig, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): DisableDomainConfigInstruction<
  TProgramAddress,
  TAccountDomainConfig,
  TAccountAdmin
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    domainConfig: { value: input.domainConfig ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.admin.value) {
    accounts.admin.value =
      'G6kBnedts6uAivtY72ToaFHBs1UVbT9udiXmQZgMEjoF' as Address<'G6kBnedts6uAivtY72ToaFHBs1UVbT9udiXmQZgMEjoF'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.admin),
    ],
    programAddress,
    data: getDisableDomainConfigInstructionDataEncoder().encode(
      args as DisableDomainConfigInstructionDataArgs
    ),
  } as DisableDomainConfigInstruction<
    TProgramAddress,
    TAccountDomainConfig,
    TAccountAdmin
  >;

  return instruction;
}

export type ParsedDisableDomainConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    domainConfig: TAccountMetas[0];
    admin: TAccountMetas[1];
  };
  data: DisableDomainConfigInstructionData;
};

export function parseDisableDomainConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDisableDomainConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      domainConfig: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getDisableDomainConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
