/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsArgsDecoder,
  getSettingsArgsEncoder,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsArgs,
  type SettingsArgsArgs,
} from '../types';

export const TRANSACTION_BUFFER_EXECUTE_COMPRESSED_DISCRIMINATOR =
  new Uint8Array([217, 17, 124, 197, 3, 110, 139, 7]);

export function getTransactionBufferExecuteCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_BUFFER_EXECUTE_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionBufferExecuteCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountExecutor extends string | IAccountMeta<string> = string,
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountExecutor extends string
        ? ReadonlySignerAccount<TAccountExecutor> &
            IAccountSignerMeta<TAccountExecutor>
        : TAccountExecutor,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferExecuteCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  settingsArgs: SettingsArgs;
};

export type TransactionBufferExecuteCompressedInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  settingsArgs: SettingsArgsArgs;
};

export function getTransactionBufferExecuteCompressedInstructionDataEncoder(): Encoder<TransactionBufferExecuteCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'secp256r1VerifyArgs',
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ['settingsArgs', getSettingsArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_EXECUTE_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferExecuteCompressedInstructionDataDecoder(): Decoder<TransactionBufferExecuteCompressedInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['secp256r1VerifyArgs', getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ['settingsArgs', getSettingsArgsDecoder()],
  ]);
}

export function getTransactionBufferExecuteCompressedInstructionDataCodec(): Codec<
  TransactionBufferExecuteCompressedInstructionDataArgs,
  TransactionBufferExecuteCompressedInstructionData
> {
  return combineCodec(
    getTransactionBufferExecuteCompressedInstructionDataEncoder(),
    getTransactionBufferExecuteCompressedInstructionDataDecoder()
  );
}

export type TransactionBufferExecuteCompressedInput<
  TAccountDomainConfig extends string = string,
  TAccountExecutor extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  domainConfig?: Address<TAccountDomainConfig>;
  executor?: TransactionSigner<TAccountExecutor>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  secp256r1VerifyArgs: TransactionBufferExecuteCompressedInstructionDataArgs['secp256r1VerifyArgs'];
  settingsArgs: TransactionBufferExecuteCompressedInstructionDataArgs['settingsArgs'];
};

export function getTransactionBufferExecuteCompressedInstruction<
  TAccountDomainConfig extends string,
  TAccountExecutor extends string,
  TAccountTransactionBuffer extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionBufferExecuteCompressedInput<
    TAccountDomainConfig,
    TAccountExecutor,
    TAccountTransactionBuffer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferExecuteCompressedInstruction<
  TProgramAddress,
  TAccountDomainConfig,
  TAccountExecutor,
  TAccountTransactionBuffer,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    executor: { value: input.executor ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.executor),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
    ],
    programAddress,
    data: getTransactionBufferExecuteCompressedInstructionDataEncoder().encode(
      args as TransactionBufferExecuteCompressedInstructionDataArgs
    ),
  } as TransactionBufferExecuteCompressedInstruction<
    TProgramAddress,
    TAccountDomainConfig,
    TAccountExecutor,
    TAccountTransactionBuffer,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >;

  return instruction;
}

export type ParsedTransactionBufferExecuteCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    domainConfig?: TAccountMetas[0] | undefined;
    executor?: TAccountMetas[1] | undefined;
    transactionBuffer: TAccountMetas[2];
    slotHashSysvar?: TAccountMetas[3] | undefined;
    instructionsSysvar?: TAccountMetas[4] | undefined;
  };
  data: TransactionBufferExecuteCompressedInstructionData;
};

export function parseTransactionBufferExecuteCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionBufferExecuteCompressedInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      domainConfig: getNextOptionalAccount(),
      executor: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferExecuteCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
