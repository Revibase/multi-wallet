/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const EDIT_DOMAIN_CONFIG_DISCRIMINATOR = new Uint8Array([1]);

export function getEditDomainConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    EDIT_DOMAIN_CONFIG_DISCRIMINATOR
  );
}

export type EditDomainConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDomainConfig extends string
        ? WritableAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type EditDomainConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  newOrigins: Option<Array<string>>;
  newAuthority: Option<Address>;
};

export type EditDomainConfigInstructionDataArgs = {
  newOrigins: OptionOrNullable<Array<string>>;
  newAuthority: OptionOrNullable<Address>;
};

export function getEditDomainConfigInstructionDataEncoder(): Encoder<EditDomainConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      [
        "newOrigins",
        getOptionEncoder(
          getArrayEncoder(
            addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
          )
        ),
      ],
      ["newAuthority", getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: EDIT_DOMAIN_CONFIG_DISCRIMINATOR })
  );
}

export function getEditDomainConfigInstructionDataDecoder(): Decoder<EditDomainConfigInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    [
      "newOrigins",
      getOptionDecoder(
        getArrayDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()))
      ),
    ],
    ["newAuthority", getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getEditDomainConfigInstructionDataCodec(): Codec<
  EditDomainConfigInstructionDataArgs,
  EditDomainConfigInstructionData
> {
  return combineCodec(
    getEditDomainConfigInstructionDataEncoder(),
    getEditDomainConfigInstructionDataDecoder()
  );
}

export type EditDomainConfigInput<
  TAccountDomainConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  domainConfig: Address<TAccountDomainConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  newOrigins: EditDomainConfigInstructionDataArgs["newOrigins"];
  newAuthority: EditDomainConfigInstructionDataArgs["newAuthority"];
};

export function getEditDomainConfigInstruction<
  TAccountDomainConfig extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: EditDomainConfigInput<
    TAccountDomainConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): EditDomainConfigInstruction<
  TProgramAddress,
  TAccountDomainConfig,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    domainConfig: { value: input.domainConfig ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getEditDomainConfigInstructionDataEncoder().encode(
      args as EditDomainConfigInstructionDataArgs
    ),
  } as EditDomainConfigInstruction<
    TProgramAddress,
    TAccountDomainConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedEditDomainConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    domainConfig: TAccountMetas[0];
    authority: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: EditDomainConfigInstructionData;
};

export function parseEditDomainConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedEditDomainConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      domainConfig: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getEditDomainConfigInstructionDataDecoder().decode(instruction.data),
  };
}
