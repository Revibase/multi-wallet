/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type WritableAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const TRANSACTION_EXECUTE_DISCRIMINATOR = new Uint8Array([14]);

export function getTransactionExecuteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    TRANSACTION_EXECUTE_DISCRIMINATOR
  );
}

export type TransactionExecuteInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTransactionBuffer extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableAccount<TAccountPayer>
        : TAccountPayer,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionExecuteInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type TransactionExecuteInstructionDataArgs = {};

export function getTransactionExecuteInstructionDataEncoder(): FixedSizeEncoder<TransactionExecuteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 1)]]),
    (value) => ({ ...value, discriminator: TRANSACTION_EXECUTE_DISCRIMINATOR })
  );
}

export function getTransactionExecuteInstructionDataDecoder(): FixedSizeDecoder<TransactionExecuteInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
  ]);
}

export function getTransactionExecuteInstructionDataCodec(): FixedSizeCodec<
  TransactionExecuteInstructionDataArgs,
  TransactionExecuteInstructionData
> {
  return combineCodec(
    getTransactionExecuteInstructionDataEncoder(),
    getTransactionExecuteInstructionDataDecoder()
  );
}

export type TransactionExecuteInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type TransactionExecuteInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountTransactionBuffer extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: Address<TAccountPayer>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  remainingAccounts: TransactionExecuteInstructionExtraArgs["remainingAccounts"];
};

export function getTransactionExecuteInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountTransactionBuffer extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionExecuteInput<
    TAccountSettings,
    TAccountPayer,
    TAccountTransactionBuffer
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionExecuteInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountTransactionBuffer
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolver scope.
  const resolverScope = { programAddress, accounts };

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.transactionBuffer),
      ...remainingAccounts,
    ],
    data: getTransactionExecuteInstructionDataEncoder().encode({}),
    programAddress,
  } as TransactionExecuteInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountTransactionBuffer
  >);
}

export type ParsedTransactionExecuteInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    transactionBuffer: TAccountMetas[2];
  };
  data: TransactionExecuteInstructionData;
};

export function parseTransactionExecuteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransactionExecuteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      transactionBuffer: getNextAccount(),
    },
    data: getTransactionExecuteInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
