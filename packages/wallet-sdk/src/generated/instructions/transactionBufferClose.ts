/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from '../types';

export const TRANSACTION_BUFFER_CLOSE_DISCRIMINATOR = new Uint8Array([12]);

export function getTransactionBufferCloseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    TRANSACTION_BUFFER_CLOSE_DISCRIMINATOR
  );
}

export type TransactionBufferCloseInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountTransactionBuffer extends string | AccountMeta<string> = string,
  TAccountCloser extends string | AccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableAccount<TAccountPayer>
        : TAccountPayer,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountCloser extends string
        ? ReadonlySignerAccount<TAccountCloser> &
            AccountSignerMeta<TAccountCloser>
        : TAccountCloser,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionBufferCloseInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
};

export type TransactionBufferCloseInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
};

export function getTransactionBufferCloseInstructionDataEncoder(): Encoder<TransactionBufferCloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      [
        'secp256r1VerifyArgs',
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_BUFFER_CLOSE_DISCRIMINATOR,
    })
  );
}

export function getTransactionBufferCloseInstructionDataDecoder(): Decoder<TransactionBufferCloseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['secp256r1VerifyArgs', getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
  ]);
}

export function getTransactionBufferCloseInstructionDataCodec(): Codec<
  TransactionBufferCloseInstructionDataArgs,
  TransactionBufferCloseInstructionData
> {
  return combineCodec(
    getTransactionBufferCloseInstructionDataEncoder(),
    getTransactionBufferCloseInstructionDataDecoder()
  );
}

export type TransactionBufferCloseInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountCloser extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: Address<TAccountPayer>;
  domainConfig?: Address<TAccountDomainConfig>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  closer?: TransactionSigner<TAccountCloser>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  secp256r1VerifyArgs: TransactionBufferCloseInstructionDataArgs['secp256r1VerifyArgs'];
};

export function getTransactionBufferCloseInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountDomainConfig extends string,
  TAccountTransactionBuffer extends string,
  TAccountCloser extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TransactionBufferCloseInput<
    TAccountSettings,
    TAccountPayer,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCloser,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionBufferCloseInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountDomainConfig,
  TAccountTransactionBuffer,
  TAccountCloser,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    closer: { value: input.closer ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.closer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
    ],
    programAddress,
    data: getTransactionBufferCloseInstructionDataEncoder().encode(
      args as TransactionBufferCloseInstructionDataArgs
    ),
  } as TransactionBufferCloseInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountDomainConfig,
    TAccountTransactionBuffer,
    TAccountCloser,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar
  >;

  return instruction;
}

export type ParsedTransactionBufferCloseInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    domainConfig?: TAccountMetas[2] | undefined;
    transactionBuffer: TAccountMetas[3];
    closer?: TAccountMetas[4] | undefined;
    slotHashSysvar?: TAccountMetas[5] | undefined;
    instructionsSysvar?: TAccountMetas[6] | undefined;
  };
  data: TransactionBufferCloseInstructionData;
};

export function parseTransactionBufferCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransactionBufferCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      domainConfig: getNextOptionalAccount(),
      transactionBuffer: getNextAccount(),
      closer: getNextOptionalAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
    },
    data: getTransactionBufferCloseInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
