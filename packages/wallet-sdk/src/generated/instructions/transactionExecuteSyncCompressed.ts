/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  getSettingsProofArgsDecoder,
  getSettingsProofArgsEncoder,
  getTransactionMessageDecoder,
  getTransactionMessageEncoder,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
  type SettingsProofArgs,
  type SettingsProofArgsArgs,
  type TransactionMessage,
  type TransactionMessageArgs,
} from "../types";

export const TRANSACTION_EXECUTE_SYNC_COMPRESSED_DISCRIMINATOR = new Uint8Array(
  [251, 154, 149, 157, 125, 132, 60, 183]
);

export function getTransactionExecuteSyncCompressedDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSACTION_EXECUTE_SYNC_COMPRESSED_DISCRIMINATOR
  );
}

export type TransactionExecuteSyncCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      ...TRemainingAccounts,
    ]
  >;

export type TransactionExecuteSyncCompressedInstructionData = {
  discriminator: ReadonlyUint8Array;
  transactionMessage: TransactionMessage;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  settingsArgs: SettingsProofArgs;
  compressedProofArgs: ProofArgs;
};

export type TransactionExecuteSyncCompressedInstructionDataArgs = {
  transactionMessage: TransactionMessageArgs;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  settingsArgs: SettingsProofArgsArgs;
  compressedProofArgs: ProofArgsArgs;
};

export function getTransactionExecuteSyncCompressedInstructionDataEncoder(): Encoder<TransactionExecuteSyncCompressedInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["transactionMessage", getTransactionMessageEncoder()],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["settingsArgs", getSettingsProofArgsEncoder()],
      ["compressedProofArgs", getProofArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: TRANSACTION_EXECUTE_SYNC_COMPRESSED_DISCRIMINATOR,
    })
  );
}

export function getTransactionExecuteSyncCompressedInstructionDataDecoder(): Decoder<TransactionExecuteSyncCompressedInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["transactionMessage", getTransactionMessageDecoder()],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["settingsArgs", getSettingsProofArgsDecoder()],
    ["compressedProofArgs", getProofArgsDecoder()],
  ]);
}

export function getTransactionExecuteSyncCompressedInstructionDataCodec(): Codec<
  TransactionExecuteSyncCompressedInstructionDataArgs,
  TransactionExecuteSyncCompressedInstructionData
> {
  return combineCodec(
    getTransactionExecuteSyncCompressedInstructionDataEncoder(),
    getTransactionExecuteSyncCompressedInstructionDataDecoder()
  );
}

export type TransactionExecuteSyncCompressedInput<
  TAccountPayer extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = {
  payer: TransactionSigner<TAccountPayer>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  transactionMessage: TransactionExecuteSyncCompressedInstructionDataArgs["transactionMessage"];
  secp256r1VerifyArgs: TransactionExecuteSyncCompressedInstructionDataArgs["secp256r1VerifyArgs"];
  settingsArgs: TransactionExecuteSyncCompressedInstructionDataArgs["settingsArgs"];
  compressedProofArgs: TransactionExecuteSyncCompressedInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getTransactionExecuteSyncCompressedInstruction<
  TAccountPayer extends string,
  TAccountSlotHashSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountInstructionsSysvar extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
>(
  input: TransactionExecuteSyncCompressedInput<
    TAccountPayer,
    TAccountSlotHashSysvar,
    TAccountDomainConfig,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): TransactionExecuteSyncCompressedInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountSlotHashSysvar,
  TAccountDomainConfig,
  TAccountInstructionsSysvar,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.instructionsSysvar),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getTransactionExecuteSyncCompressedInstructionDataEncoder().encode(
      args as TransactionExecuteSyncCompressedInstructionDataArgs
    ),
  } as TransactionExecuteSyncCompressedInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountSlotHashSysvar,
    TAccountDomainConfig,
    TAccountInstructionsSysvar,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedTransactionExecuteSyncCompressedInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    slotHashSysvar?: TAccountMetas[1] | undefined;
    domainConfig?: TAccountMetas[2] | undefined;
    instructionsSysvar: TAccountMetas[3];
  };
  data: TransactionExecuteSyncCompressedInstructionData;
};

export function parseTransactionExecuteSyncCompressedInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransactionExecuteSyncCompressedInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      domainConfig: getNextOptionalAccount(),
      instructionsSysvar: getNextAccount(),
    },
    data: getTransactionExecuteSyncCompressedInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
