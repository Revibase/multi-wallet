/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_GLOBAL_COUNTER_DISCRIMINATOR = new Uint8Array([4]);

export function getCreateGlobalCounterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CREATE_GLOBAL_COUNTER_DISCRIMINATOR
  );
}

export type CreateGlobalCounterInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountGlobalCounter extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGlobalCounter extends string
        ? WritableAccount<TAccountGlobalCounter>
        : TAccountGlobalCounter,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateGlobalCounterInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CreateGlobalCounterInstructionDataArgs = {};

export function getCreateGlobalCounterInstructionDataEncoder(): FixedSizeEncoder<CreateGlobalCounterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 1)]]),
    (value) => ({
      ...value,
      discriminator: CREATE_GLOBAL_COUNTER_DISCRIMINATOR,
    })
  );
}

export function getCreateGlobalCounterInstructionDataDecoder(): FixedSizeDecoder<CreateGlobalCounterInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
  ]);
}

export function getCreateGlobalCounterInstructionDataCodec(): FixedSizeCodec<
  CreateGlobalCounterInstructionDataArgs,
  CreateGlobalCounterInstructionData
> {
  return combineCodec(
    getCreateGlobalCounterInstructionDataEncoder(),
    getCreateGlobalCounterInstructionDataDecoder()
  );
}

export type CreateGlobalCounterAsyncInput<
  TAccountGlobalCounter extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  globalCounter?: Address<TAccountGlobalCounter>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getCreateGlobalCounterInstructionAsync<
  TAccountGlobalCounter extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CreateGlobalCounterAsyncInput<
    TAccountGlobalCounter,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateGlobalCounterInstruction<
    TProgramAddress,
    TAccountGlobalCounter,
    TAccountPayer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalCounter: { value: input.globalCounter ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.globalCounter.value) {
    accounts.globalCounter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 108, 111, 98, 97, 108, 95, 99, 111, 117, 110, 116, 101, 114,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalCounter),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateGlobalCounterInstructionDataEncoder().encode({}),
  } as CreateGlobalCounterInstruction<
    TProgramAddress,
    TAccountGlobalCounter,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateGlobalCounterInput<
  TAccountGlobalCounter extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  globalCounter: Address<TAccountGlobalCounter>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCreateGlobalCounterInstruction<
  TAccountGlobalCounter extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CreateGlobalCounterInput<
    TAccountGlobalCounter,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateGlobalCounterInstruction<
  TProgramAddress,
  TAccountGlobalCounter,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    globalCounter: { value: input.globalCounter ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.globalCounter),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateGlobalCounterInstructionDataEncoder().encode({}),
  } as CreateGlobalCounterInstruction<
    TProgramAddress,
    TAccountGlobalCounter,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateGlobalCounterInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    globalCounter: TAccountMetas[0];
    payer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreateGlobalCounterInstructionData;
};

export function parseCreateGlobalCounterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateGlobalCounterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      globalCounter: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateGlobalCounterInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
