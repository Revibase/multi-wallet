/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";
import {
  getDelegateCreateOrMutateArgsDecoder,
  getDelegateCreateOrMutateArgsEncoder,
  getPermissionsDecoder,
  getPermissionsEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type DelegateCreateOrMutateArgs,
  type DelegateCreateOrMutateArgsArgs,
  type IPermissions,
  type PermissionsArgs,
  type ProofArgs,
  type ProofArgsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from "../types";

export const CREATE_MULTI_WALLET_DISCRIMINATOR = new Uint8Array([5]);

export function getCreateMultiWalletDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CREATE_MULTI_WALLET_DISCRIMINATOR
  );
}

export type CreateMultiWalletInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountInitialMember extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountGlobalCounter extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountInitialMember extends string
        ? ReadonlySignerAccount<TAccountInitialMember> &
            AccountSignerMeta<TAccountInitialMember>
        : TAccountInitialMember,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountGlobalCounter extends string
        ? WritableAccount<TAccountGlobalCounter>
        : TAccountGlobalCounter,
      ...TRemainingAccounts,
    ]
  >;

export type CreateMultiWalletInstructionData = {
  discriminator: ReadonlyUint8Array;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  permissions: IPermissions;
  delegateCreationArgs: Option<DelegateCreateOrMutateArgs>;
  compressedProofArgs: Option<ProofArgs>;
};

export type CreateMultiWalletInstructionDataArgs = {
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  permissions: PermissionsArgs;
  delegateCreationArgs: OptionOrNullable<DelegateCreateOrMutateArgsArgs>;
  compressedProofArgs: OptionOrNullable<ProofArgsArgs>;
};

export function getCreateMultiWalletInstructionDataEncoder(): Encoder<CreateMultiWalletInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["permissions", getPermissionsEncoder()],
      [
        "delegateCreationArgs",
        getOptionEncoder(getDelegateCreateOrMutateArgsEncoder()),
      ],
      ["compressedProofArgs", getOptionEncoder(getProofArgsEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_MULTI_WALLET_DISCRIMINATOR })
  );
}

export function getCreateMultiWalletInstructionDataDecoder(): Decoder<CreateMultiWalletInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["permissions", getPermissionsDecoder()],
    [
      "delegateCreationArgs",
      getOptionDecoder(getDelegateCreateOrMutateArgsDecoder()),
    ],
    ["compressedProofArgs", getOptionDecoder(getProofArgsDecoder())],
  ]);
}

export function getCreateMultiWalletInstructionDataCodec(): Codec<
  CreateMultiWalletInstructionDataArgs,
  CreateMultiWalletInstructionData
> {
  return combineCodec(
    getCreateMultiWalletInstructionDataEncoder(),
    getCreateMultiWalletInstructionDataDecoder()
  );
}

export type CreateMultiWalletAsyncInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountInitialMember extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountGlobalCounter extends string = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = {
  settings?: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  initialMember?: TransactionSigner<TAccountInitialMember>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  globalCounter: Address<TAccountGlobalCounter>;
  secp256r1VerifyArgs: CreateMultiWalletInstructionDataArgs["secp256r1VerifyArgs"];
  permissions: CreateMultiWalletInstructionDataArgs["permissions"];
  delegateCreationArgs: CreateMultiWalletInstructionDataArgs["delegateCreationArgs"];
  compressedProofArgs: CreateMultiWalletInstructionDataArgs["compressedProofArgs"];
  remainingAccounts: TRemainingAccounts;
};

export async function getCreateMultiWalletInstructionAsync<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountInitialMember extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountGlobalCounter extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
>(
  input: CreateMultiWalletAsyncInput<
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter,
    TRemainingAccounts
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateMultiWalletInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter,
    TRemainingAccounts
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    initialMember: { value: input.initialMember ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    globalCounter: { value: input.globalCounter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.settings.value) {
    accounts.settings.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 117, 108, 116, 105, 95, 119, 97, 108, 108, 101, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.globalCounter.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.initialMember),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.globalCounter),
      ...input.remainingAccounts,
    ],
    programAddress,
    data: getCreateMultiWalletInstructionDataEncoder().encode(
      args as CreateMultiWalletInstructionDataArgs
    ),
  } as CreateMultiWalletInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter,
    TRemainingAccounts
  >;

  return instruction;
}

export type CreateMultiWalletInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountInitialMember extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountGlobalCounter extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  initialMember?: TransactionSigner<TAccountInitialMember>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  globalCounter: Address<TAccountGlobalCounter>;
  secp256r1VerifyArgs: CreateMultiWalletInstructionDataArgs["secp256r1VerifyArgs"];
  permissions: CreateMultiWalletInstructionDataArgs["permissions"];
  delegateCreationArgs: CreateMultiWalletInstructionDataArgs["delegateCreationArgs"];
  compressedProofArgs: CreateMultiWalletInstructionDataArgs["compressedProofArgs"];
};

export function getCreateMultiWalletInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountInitialMember extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountGlobalCounter extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CreateMultiWalletInput<
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter
  >,
  config?: { programAddress?: TProgramAddress }
): CreateMultiWalletInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountInitialMember,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TAccountDomainConfig,
  TAccountGlobalCounter
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    initialMember: { value: input.initialMember ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    globalCounter: { value: input.globalCounter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.initialMember),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.globalCounter),
    ],
    programAddress,
    data: getCreateMultiWalletInstructionDataEncoder().encode(
      args as CreateMultiWalletInstructionDataArgs
    ),
  } as CreateMultiWalletInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountGlobalCounter
  >;

  return instruction;
}

export type ParsedCreateMultiWalletInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    initialMember?: TAccountMetas[2] | undefined;
    systemProgram: TAccountMetas[3];
    slotHashSysvar?: TAccountMetas[4] | undefined;
    instructionsSysvar?: TAccountMetas[5] | undefined;
    domainConfig?: TAccountMetas[6] | undefined;
    globalCounter: TAccountMetas[7];
  };
  data: CreateMultiWalletInstructionData;
};

export function parseCreateMultiWalletInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateMultiWalletInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      initialMember: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
      domainConfig: getNextOptionalAccount(),
      globalCounter: getNextAccount(),
    },
    data: getCreateMultiWalletInstructionDataDecoder().decode(instruction.data),
  };
}
