/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";
import {
  getPermissionsDecoder,
  getPermissionsEncoder,
  getSecp256r1VerifyArgsDecoder,
  getSecp256r1VerifyArgsEncoder,
  type IPermissions,
  type PermissionsArgs,
  type Secp256r1VerifyArgs,
  type Secp256r1VerifyArgsArgs,
} from "../types";

export const CREATE_DISCRIMINATOR = new Uint8Array([
  24, 30, 200, 40, 5, 28, 7, 119,
]);

export function getCreateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CREATE_DISCRIMINATOR);
}

export type CreateInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountInitialMember extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountSlotHashSysvar extends
    | string
    | IAccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | IAccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountDomainConfig extends string | IAccountMeta<string> = string,
  TAccountDelegateAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountInitialMember extends string
        ? ReadonlySignerAccount<TAccountInitialMember> &
            IAccountSignerMeta<TAccountInitialMember>
        : TAccountInitialMember,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountDomainConfig extends string
        ? ReadonlyAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountDelegateAccount extends string
        ? WritableAccount<TAccountDelegateAccount>
        : TAccountDelegateAccount,
      ...TRemainingAccounts,
    ]
  >;

export type CreateInstructionData = {
  discriminator: ReadonlyUint8Array;
  createKey: Address;
  secp256r1VerifyArgs: Option<Secp256r1VerifyArgs>;
  permissions: IPermissions;
};

export type CreateInstructionDataArgs = {
  createKey: Address;
  secp256r1VerifyArgs: OptionOrNullable<Secp256r1VerifyArgsArgs>;
  permissions: PermissionsArgs;
};

export function getCreateInstructionDataEncoder(): Encoder<CreateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["createKey", getAddressEncoder()],
      [
        "secp256r1VerifyArgs",
        getOptionEncoder(getSecp256r1VerifyArgsEncoder()),
      ],
      ["permissions", getPermissionsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CREATE_DISCRIMINATOR })
  );
}

export function getCreateInstructionDataDecoder(): Decoder<CreateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["createKey", getAddressDecoder()],
    ["secp256r1VerifyArgs", getOptionDecoder(getSecp256r1VerifyArgsDecoder())],
    ["permissions", getPermissionsDecoder()],
  ]);
}

export function getCreateInstructionDataCodec(): Codec<
  CreateInstructionDataArgs,
  CreateInstructionData
> {
  return combineCodec(
    getCreateInstructionDataEncoder(),
    getCreateInstructionDataDecoder()
  );
}

export type CreateAsyncInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountInitialMember extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountDelegateAccount extends string = string,
> = {
  settings?: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  initialMember?: TransactionSigner<TAccountInitialMember>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  delegateAccount?: Address<TAccountDelegateAccount>;
  createKey: CreateInstructionDataArgs["createKey"];
  secp256r1VerifyArgs: CreateInstructionDataArgs["secp256r1VerifyArgs"];
  permissions: CreateInstructionDataArgs["permissions"];
};

export async function getCreateInstructionAsync<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountInitialMember extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountDelegateAccount extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CreateAsyncInput<
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountDelegateAccount
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountDelegateAccount
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    initialMember: { value: input.initialMember ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    delegateAccount: { value: input.delegateAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.settings.value) {
    accounts.settings.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 117, 108, 116, 105, 95, 119, 97, 108, 108, 101, 116,
          ])
        ),
        getAddressEncoder().encode(expectSome(args.createKey)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.initialMember),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.delegateAccount),
    ],
    programAddress,
    data: getCreateInstructionDataEncoder().encode(
      args as CreateInstructionDataArgs
    ),
  } as CreateInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountDelegateAccount
  >;

  return instruction;
}

export type CreateInput<
  TAccountSettings extends string = string,
  TAccountPayer extends string = string,
  TAccountInitialMember extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountDomainConfig extends string = string,
  TAccountDelegateAccount extends string = string,
> = {
  settings: Address<TAccountSettings>;
  payer: TransactionSigner<TAccountPayer>;
  initialMember?: TransactionSigner<TAccountInitialMember>;
  systemProgram?: Address<TAccountSystemProgram>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  domainConfig?: Address<TAccountDomainConfig>;
  delegateAccount?: Address<TAccountDelegateAccount>;
  createKey: CreateInstructionDataArgs["createKey"];
  secp256r1VerifyArgs: CreateInstructionDataArgs["secp256r1VerifyArgs"];
  permissions: CreateInstructionDataArgs["permissions"];
};

export function getCreateInstruction<
  TAccountSettings extends string,
  TAccountPayer extends string,
  TAccountInitialMember extends string,
  TAccountSystemProgram extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountDomainConfig extends string,
  TAccountDelegateAccount extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: CreateInput<
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountDelegateAccount
  >,
  config?: { programAddress?: TProgramAddress }
): CreateInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountPayer,
  TAccountInitialMember,
  TAccountSystemProgram,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TAccountDomainConfig,
  TAccountDelegateAccount
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    initialMember: { value: input.initialMember ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    domainConfig: { value: input.domainConfig ?? null, isWritable: false },
    delegateAccount: { value: input.delegateAccount ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.initialMember),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.delegateAccount),
    ],
    programAddress,
    data: getCreateInstructionDataEncoder().encode(
      args as CreateInstructionDataArgs
    ),
  } as CreateInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountPayer,
    TAccountInitialMember,
    TAccountSystemProgram,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountDomainConfig,
    TAccountDelegateAccount
  >;

  return instruction;
}

export type ParsedCreateInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    payer: TAccountMetas[1];
    initialMember?: TAccountMetas[2] | undefined;
    systemProgram: TAccountMetas[3];
    slotHashSysvar?: TAccountMetas[4] | undefined;
    instructionsSysvar?: TAccountMetas[5] | undefined;
    domainConfig?: TAccountMetas[6] | undefined;
    delegateAccount?: TAccountMetas[7] | undefined;
  };
  data: CreateInstructionData;
};

export function parseCreateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      payer: getNextAccount(),
      initialMember: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextOptionalAccount(),
      domainConfig: getNextOptionalAccount(),
      delegateAccount: getNextOptionalAccount(),
    },
    data: getCreateInstructionDataDecoder().decode(instruction.data),
  };
}
