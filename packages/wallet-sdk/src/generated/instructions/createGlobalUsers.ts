/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableSignerAccount,
} from "@solana/kit";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getCreateGlobalUserArgsDecoder,
  getCreateGlobalUserArgsEncoder,
  getProofArgsDecoder,
  getProofArgsEncoder,
  type CreateGlobalUserArgs,
  type CreateGlobalUserArgsArgs,
  type ProofArgs,
  type ProofArgsArgs,
} from "../types";

export const CREATE_GLOBAL_USERS_DISCRIMINATOR = new Uint8Array([6]);

export function getCreateGlobalUsersDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CREATE_GLOBAL_USERS_DISCRIMINATOR
  );
}

export type CreateGlobalUsersInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      ...TRemainingAccounts,
    ]
  >;

export type CreateGlobalUsersInstructionData = {
  discriminator: ReadonlyUint8Array;
  compressedProofArgs: ProofArgs;
  createUserArgs: Array<CreateGlobalUserArgs>;
};

export type CreateGlobalUsersInstructionDataArgs = {
  compressedProofArgs: ProofArgsArgs;
  createUserArgs: Array<CreateGlobalUserArgsArgs>;
};

export function getCreateGlobalUsersInstructionDataEncoder(): Encoder<CreateGlobalUsersInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["compressedProofArgs", getProofArgsEncoder()],
      ["createUserArgs", getArrayEncoder(getCreateGlobalUserArgsEncoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_GLOBAL_USERS_DISCRIMINATOR })
  );
}

export function getCreateGlobalUsersInstructionDataDecoder(): Decoder<CreateGlobalUsersInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["compressedProofArgs", getProofArgsDecoder()],
    ["createUserArgs", getArrayDecoder(getCreateGlobalUserArgsDecoder())],
  ]);
}

export function getCreateGlobalUsersInstructionDataCodec(): Codec<
  CreateGlobalUsersInstructionDataArgs,
  CreateGlobalUsersInstructionData
> {
  return combineCodec(
    getCreateGlobalUsersInstructionDataEncoder(),
    getCreateGlobalUsersInstructionDataDecoder()
  );
}

export type CreateGlobalUsersInput<
  TAccountPayer extends string = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = {
  payer: TransactionSigner<TAccountPayer>;
  compressedProofArgs: CreateGlobalUsersInstructionDataArgs["compressedProofArgs"];
  createUserArgs: CreateGlobalUsersInstructionDataArgs["createUserArgs"];
  remainingAccounts: TRemainingAccounts;
};

export function getCreateGlobalUsersInstruction<
  TAccountPayer extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
>(
  input: CreateGlobalUsersInput<TAccountPayer, TRemainingAccounts>,
  config?: { programAddress?: TProgramAddress }
): CreateGlobalUsersInstruction<
  TProgramAddress,
  TAccountPayer,
  TRemainingAccounts
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [getAccountMeta(accounts.payer), ...input.remainingAccounts],
    programAddress,
    data: getCreateGlobalUsersInstructionDataEncoder().encode(
      args as CreateGlobalUsersInstructionDataArgs
    ),
  } as CreateGlobalUsersInstruction<
    TProgramAddress,
    TAccountPayer,
    TRemainingAccounts
  >;

  return instruction;
}

export type ParsedCreateGlobalUsersInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
  };
  data: CreateGlobalUsersInstructionData;
};

export function parseCreateGlobalUsersInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateGlobalUsersInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
    },
    data: getCreateGlobalUsersInstructionDataDecoder().decode(instruction.data),
  };
}
