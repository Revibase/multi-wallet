/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MULTI_WALLET_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const DELETE_DOMAIN_CONFIG_DISCRIMINATOR = new Uint8Array([2]);

export function getDeleteDomainConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    DELETE_DOMAIN_CONFIG_DISCRIMINATOR
  );
}

export type DeleteDomainConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountDomainConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountDomainConfig extends string
        ? WritableAccount<TAccountDomainConfig>
        : TAccountDomainConfig,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DeleteDomainConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type DeleteDomainConfigInstructionDataArgs = {};

export function getDeleteDomainConfigInstructionDataEncoder(): FixedSizeEncoder<DeleteDomainConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 1)]]),
    (value) => ({ ...value, discriminator: DELETE_DOMAIN_CONFIG_DISCRIMINATOR })
  );
}

export function getDeleteDomainConfigInstructionDataDecoder(): FixedSizeDecoder<DeleteDomainConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
  ]);
}

export function getDeleteDomainConfigInstructionDataCodec(): FixedSizeCodec<
  DeleteDomainConfigInstructionDataArgs,
  DeleteDomainConfigInstructionData
> {
  return combineCodec(
    getDeleteDomainConfigInstructionDataEncoder(),
    getDeleteDomainConfigInstructionDataDecoder()
  );
}

export type DeleteDomainConfigInput<
  TAccountDomainConfig extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  domainConfig: Address<TAccountDomainConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getDeleteDomainConfigInstruction<
  TAccountDomainConfig extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: DeleteDomainConfigInput<
    TAccountDomainConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DeleteDomainConfigInstruction<
  TProgramAddress,
  TAccountDomainConfig,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    domainConfig: { value: input.domainConfig ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.domainConfig),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDeleteDomainConfigInstructionDataEncoder().encode({}),
  } as DeleteDomainConfigInstruction<
    TProgramAddress,
    TAccountDomainConfig,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDeleteDomainConfigInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    domainConfig: TAccountMetas[0];
    authority: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: DeleteDomainConfigInstructionData;
};

export function parseDeleteDomainConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDeleteDomainConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      domainConfig: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDeleteDomainConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
