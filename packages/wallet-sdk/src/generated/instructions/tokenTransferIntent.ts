/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from "gill";
import { parseRemainingAccounts } from "../../hooked";
import { MULTI_WALLET_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";
import {
  getSecp256r1VerifyArgsWithDomainAddressDecoder,
  getSecp256r1VerifyArgsWithDomainAddressEncoder,
  type Secp256r1VerifyArgsWithDomainAddress,
  type Secp256r1VerifyArgsWithDomainAddressArgs,
} from "../types";

export const TOKEN_TRANSFER_INTENT_DISCRIMINATOR = new Uint8Array([30]);

export function getTokenTransferIntentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    TOKEN_TRANSFER_INTENT_DISCRIMINATOR
  );
}

export type TokenTransferIntentInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountSlotHashSysvar extends
    | string
    | AccountMeta<string> = "SysvarS1otHashes111111111111111111111111111",
  TAccountInstructionsSysvar extends
    | string
    | AccountMeta<string> = "Sysvar1nstructions1111111111111111111111111",
  TAccountSource extends string | AccountMeta<string> = string,
  TAccountSourceTokenAccount extends string | AccountMeta<string> = string,
  TAccountDestination extends string | AccountMeta<string> = string,
  TAccountDestinationTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSlotHashSysvar extends string
        ? ReadonlyAccount<TAccountSlotHashSysvar>
        : TAccountSlotHashSysvar,
      TAccountInstructionsSysvar extends string
        ? ReadonlyAccount<TAccountInstructionsSysvar>
        : TAccountInstructionsSysvar,
      TAccountSource extends string
        ? WritableAccount<TAccountSource>
        : TAccountSource,
      TAccountSourceTokenAccount extends string
        ? WritableAccount<TAccountSourceTokenAccount>
        : TAccountSourceTokenAccount,
      TAccountDestination extends string
        ? ReadonlyAccount<TAccountDestination>
        : TAccountDestination,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TokenTransferIntentInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  secp256r1VerifyArgs: Array<Secp256r1VerifyArgsWithDomainAddress>;
};

export type TokenTransferIntentInstructionDataArgs = {
  amount: number | bigint;
  secp256r1VerifyArgs: Array<Secp256r1VerifyArgsWithDomainAddressArgs>;
};

export function getTokenTransferIntentInstructionDataEncoder(): Encoder<TokenTransferIntentInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 1)],
      ["amount", getU64Encoder()],
      [
        "secp256r1VerifyArgs",
        getArrayEncoder(getSecp256r1VerifyArgsWithDomainAddressEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: TOKEN_TRANSFER_INTENT_DISCRIMINATOR,
    })
  );
}

export function getTokenTransferIntentInstructionDataDecoder(): Decoder<TokenTransferIntentInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 1)],
    ["amount", getU64Decoder()],
    [
      "secp256r1VerifyArgs",
      getArrayDecoder(getSecp256r1VerifyArgsWithDomainAddressDecoder()),
    ],
  ]);
}

export function getTokenTransferIntentInstructionDataCodec(): Codec<
  TokenTransferIntentInstructionDataArgs,
  TokenTransferIntentInstructionData
> {
  return combineCodec(
    getTokenTransferIntentInstructionDataEncoder(),
    getTokenTransferIntentInstructionDataDecoder()
  );
}

export type TokenTransferIntentInstructionExtraArgs = {
  remainingAccounts: Array<{ address: Address; role: number }>;
};

export type TokenTransferIntentAsyncInput<
  TAccountSettings extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountSource extends string = string,
  TAccountSourceTokenAccount extends string = string,
  TAccountDestination extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  source?: Address<TAccountSource>;
  sourceTokenAccount?: Address<TAccountSourceTokenAccount>;
  destination: Address<TAccountDestination>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  amount: TokenTransferIntentInstructionDataArgs["amount"];
  secp256r1VerifyArgs: TokenTransferIntentInstructionDataArgs["secp256r1VerifyArgs"];
  remainingAccounts: TokenTransferIntentInstructionExtraArgs["remainingAccounts"];
};

export async function getTokenTransferIntentInstructionAsync<
  TAccountSettings extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountSource extends string,
  TAccountSourceTokenAccount extends string,
  TAccountDestination extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TokenTransferIntentAsyncInput<
    TAccountSettings,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TokenTransferIntentInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    source: { value: input.source ?? null, isWritable: true },
    sourceTokenAccount: {
      value: input.sourceTokenAccount ?? null,
      isWritable: true,
    },
    destination: { value: input.destination ?? null, isWritable: false },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.source.value) {
    accounts.source.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 117, 108, 116, 105, 95, 119, 97, 108, 108, 101, 116,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.settings.value)),
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.sourceTokenAccount.value) {
    accounts.sourceTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.source.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.sourceTokenAccount),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      ...remainingAccounts,
    ],
    data: getTokenTransferIntentInstructionDataEncoder().encode(
      args as TokenTransferIntentInstructionDataArgs
    ),
    programAddress,
  } as TokenTransferIntentInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type TokenTransferIntentInput<
  TAccountSettings extends string = string,
  TAccountSlotHashSysvar extends string = string,
  TAccountInstructionsSysvar extends string = string,
  TAccountSource extends string = string,
  TAccountSourceTokenAccount extends string = string,
  TAccountDestination extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountMint extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  slotHashSysvar?: Address<TAccountSlotHashSysvar>;
  instructionsSysvar?: Address<TAccountInstructionsSysvar>;
  source: Address<TAccountSource>;
  sourceTokenAccount: Address<TAccountSourceTokenAccount>;
  destination: Address<TAccountDestination>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
  mint: Address<TAccountMint>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  amount: TokenTransferIntentInstructionDataArgs["amount"];
  secp256r1VerifyArgs: TokenTransferIntentInstructionDataArgs["secp256r1VerifyArgs"];
  remainingAccounts: TokenTransferIntentInstructionExtraArgs["remainingAccounts"];
};

export function getTokenTransferIntentInstruction<
  TAccountSettings extends string,
  TAccountSlotHashSysvar extends string,
  TAccountInstructionsSysvar extends string,
  TAccountSource extends string,
  TAccountSourceTokenAccount extends string,
  TAccountDestination extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountTokenProgram extends string,
  TAccountMint extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof MULTI_WALLET_PROGRAM_ADDRESS,
>(
  input: TokenTransferIntentInput<
    TAccountSettings,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TokenTransferIntentInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSlotHashSysvar,
  TAccountInstructionsSysvar,
  TAccountSource,
  TAccountSourceTokenAccount,
  TAccountDestination,
  TAccountDestinationTokenAccount,
  TAccountTokenProgram,
  TAccountMint,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MULTI_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    slotHashSysvar: { value: input.slotHashSysvar ?? null, isWritable: false },
    instructionsSysvar: {
      value: input.instructionsSysvar ?? null,
      isWritable: false,
    },
    source: { value: input.source ?? null, isWritable: true },
    sourceTokenAccount: {
      value: input.sourceTokenAccount ?? null,
      isWritable: true,
    },
    destination: { value: input.destination ?? null, isWritable: false },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.slotHashSysvar.value) {
    accounts.slotHashSysvar.value =
      "SysvarS1otHashes111111111111111111111111111" as Address<"SysvarS1otHashes111111111111111111111111111">;
  }
  if (!accounts.instructionsSysvar.value) {
    accounts.instructionsSysvar.value =
      "Sysvar1nstructions1111111111111111111111111" as Address<"Sysvar1nstructions1111111111111111111111111">;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }

  // Remaining accounts.
  const remainingAccounts: AccountMeta[] =
    parseRemainingAccounts(resolverScope);

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.slotHashSysvar),
      getAccountMeta(accounts.instructionsSysvar),
      getAccountMeta(accounts.source),
      getAccountMeta(accounts.sourceTokenAccount),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      ...remainingAccounts,
    ],
    data: getTokenTransferIntentInstructionDataEncoder().encode(
      args as TokenTransferIntentInstructionDataArgs
    ),
    programAddress,
  } as TokenTransferIntentInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSlotHashSysvar,
    TAccountInstructionsSysvar,
    TAccountSource,
    TAccountSourceTokenAccount,
    TAccountDestination,
    TAccountDestinationTokenAccount,
    TAccountTokenProgram,
    TAccountMint,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >);
}

export type ParsedTokenTransferIntentInstruction<
  TProgram extends string = typeof MULTI_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    slotHashSysvar?: TAccountMetas[1] | undefined;
    instructionsSysvar: TAccountMetas[2];
    source: TAccountMetas[3];
    sourceTokenAccount: TAccountMetas[4];
    destination: TAccountMetas[5];
    destinationTokenAccount: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    mint: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
  };
  data: TokenTransferIntentInstructionData;
};

export function parseTokenTransferIntentInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTokenTransferIntentInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === MULTI_WALLET_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      slotHashSysvar: getNextOptionalAccount(),
      instructionsSysvar: getNextAccount(),
      source: getNextAccount(),
      sourceTokenAccount: getNextAccount(),
      destination: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      mint: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getTokenTransferIntentInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
