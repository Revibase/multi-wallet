/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const GLOBAL_COUNTER_DISCRIMINATOR = new Uint8Array([
  42, 206, 176, 58, 175, 129, 130, 233,
]);

export function getGlobalCounterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GLOBAL_COUNTER_DISCRIMINATOR
  );
}

export type GlobalCounter = {
  discriminator: ReadonlyUint8Array;
  index: bigint;
};

export type GlobalCounterArgs = { index: number | bigint };

export function getGlobalCounterEncoder(): FixedSizeEncoder<GlobalCounterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['index', getU128Encoder()],
    ]),
    (value) => ({ ...value, discriminator: GLOBAL_COUNTER_DISCRIMINATOR })
  );
}

export function getGlobalCounterDecoder(): FixedSizeDecoder<GlobalCounter> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['index', getU128Decoder()],
  ]);
}

export function getGlobalCounterCodec(): FixedSizeCodec<
  GlobalCounterArgs,
  GlobalCounter
> {
  return combineCodec(getGlobalCounterEncoder(), getGlobalCounterDecoder());
}

export function decodeGlobalCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GlobalCounter, TAddress>;
export function decodeGlobalCounter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GlobalCounter, TAddress>;
export function decodeGlobalCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GlobalCounter, TAddress> | MaybeAccount<GlobalCounter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGlobalCounterDecoder()
  );
}

export async function fetchGlobalCounter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GlobalCounter, TAddress>> {
  const maybeAccount = await fetchMaybeGlobalCounter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGlobalCounter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GlobalCounter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGlobalCounter(maybeAccount);
}

export async function fetchAllGlobalCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GlobalCounter>[]> {
  const maybeAccounts = await fetchAllMaybeGlobalCounter(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGlobalCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GlobalCounter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGlobalCounter(maybeAccount));
}

export function getGlobalCounterSize(): number {
  return 24;
}
