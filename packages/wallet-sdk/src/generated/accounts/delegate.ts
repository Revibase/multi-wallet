/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const DELEGATE_DISCRIMINATOR = new Uint8Array([
  92, 145, 166, 111, 11, 38, 38, 247,
]);

export function getDelegateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DELEGATE_DISCRIMINATOR);
}

export type Delegate = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  multiWalletSettings: Address;
};

export type DelegateArgs = { bump: number; multiWalletSettings: Address };

export function getDelegateEncoder(): Encoder<DelegateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['multiWalletSettings', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: DELEGATE_DISCRIMINATOR })
  );
}

export function getDelegateDecoder(): Decoder<Delegate> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['multiWalletSettings', getAddressDecoder()],
  ]);
}

export function getDelegateCodec(): Codec<DelegateArgs, Delegate> {
  return combineCodec(getDelegateEncoder(), getDelegateDecoder());
}

export function decodeDelegate<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Delegate, TAddress>;
export function decodeDelegate<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Delegate, TAddress>;
export function decodeDelegate<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Delegate, TAddress> | MaybeAccount<Delegate, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDelegateDecoder()
  );
}

export async function fetchDelegate<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Delegate, TAddress>> {
  const maybeAccount = await fetchMaybeDelegate(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDelegate<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Delegate, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDelegate(maybeAccount);
}

export async function fetchAllDelegate(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Delegate>[]> {
  const maybeAccounts = await fetchAllMaybeDelegate(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDelegate(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Delegate>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeDelegate(maybeAccount));
}

export function getDelegateSize(): number {
  return 41;
}
