/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getMemberDecoder,
  getMemberEncoder,
  type Member,
  type MemberArgs,
} from '../types';

export const SETTINGS_DISCRIMINATOR = new Uint8Array([
  223, 179, 163, 190, 177, 224, 67, 173,
]);

export function getSettingsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SETTINGS_DISCRIMINATOR);
}

export type Settings = {
  discriminator: ReadonlyUint8Array;
  threshold: number;
  multiWalletBump: number;
  bump: number;
  members: Array<Member>;
};

export type SettingsArgs = {
  threshold: number;
  multiWalletBump: number;
  bump: number;
  members: Array<MemberArgs>;
};

export function getSettingsEncoder(): Encoder<SettingsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['threshold', getU8Encoder()],
      ['multiWalletBump', getU8Encoder()],
      ['bump', getU8Encoder()],
      ['members', getArrayEncoder(getMemberEncoder())],
    ]),
    (value) => ({ ...value, discriminator: SETTINGS_DISCRIMINATOR })
  );
}

export function getSettingsDecoder(): Decoder<Settings> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['threshold', getU8Decoder()],
    ['multiWalletBump', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['members', getArrayDecoder(getMemberDecoder())],
  ]);
}

export function getSettingsCodec(): Codec<SettingsArgs, Settings> {
  return combineCodec(getSettingsEncoder(), getSettingsDecoder());
}

export function decodeSettings<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Settings, TAddress>;
export function decodeSettings<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Settings, TAddress>;
export function decodeSettings<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Settings, TAddress> | MaybeAccount<Settings, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSettingsDecoder()
  );
}

export async function fetchSettings<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Settings, TAddress>> {
  const maybeAccount = await fetchMaybeSettings(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSettings<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Settings, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSettings(maybeAccount);
}

export async function fetchAllSettings(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Settings>[]> {
  const maybeAccounts = await fetchAllMaybeSettings(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSettings(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Settings>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSettings(maybeAccount));
}
