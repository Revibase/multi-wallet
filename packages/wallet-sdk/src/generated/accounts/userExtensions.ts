/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "gill";

export const USER_EXTENSIONS_DISCRIMINATOR = new Uint8Array([
  196, 137, 210, 202, 156, 145, 89, 41,
]);

export function getUserExtensionsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_EXTENSIONS_DISCRIMINATOR
  );
}

export type UserExtensions = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  apiUrlLen: number;
  apiUrl: ReadonlyUint8Array;
  reserved: ReadonlyUint8Array;
};

export type UserExtensionsArgs = {
  authority: Address;
  apiUrlLen: number;
  apiUrl: ReadonlyUint8Array;
  reserved: ReadonlyUint8Array;
};

export function getUserExtensionsEncoder(): FixedSizeEncoder<UserExtensionsArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["authority", getAddressEncoder()],
      ["apiUrlLen", getU16Encoder()],
      ["apiUrl", fixEncoderSize(getBytesEncoder(), 512)],
      ["reserved", fixEncoderSize(getBytesEncoder(), 512)],
    ]),
    (value) => ({ ...value, discriminator: USER_EXTENSIONS_DISCRIMINATOR })
  );
}

export function getUserExtensionsDecoder(): FixedSizeDecoder<UserExtensions> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["authority", getAddressDecoder()],
    ["apiUrlLen", getU16Decoder()],
    ["apiUrl", fixDecoderSize(getBytesDecoder(), 512)],
    ["reserved", fixDecoderSize(getBytesDecoder(), 512)],
  ]);
}

export function getUserExtensionsCodec(): FixedSizeCodec<
  UserExtensionsArgs,
  UserExtensions
> {
  return combineCodec(getUserExtensionsEncoder(), getUserExtensionsDecoder());
}

export function decodeUserExtensions<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserExtensions, TAddress>;
export function decodeUserExtensions<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserExtensions, TAddress>;
export function decodeUserExtensions<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserExtensions, TAddress> | MaybeAccount<UserExtensions, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserExtensionsDecoder()
  );
}

export async function fetchUserExtensions<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserExtensions, TAddress>> {
  const maybeAccount = await fetchMaybeUserExtensions(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserExtensions<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserExtensions, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserExtensions(maybeAccount);
}

export async function fetchAllUserExtensions(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserExtensions>[]> {
  const maybeAccounts = await fetchAllMaybeUserExtensions(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserExtensions(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserExtensions>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUserExtensions(maybeAccount)
  );
}

export function getUserExtensionsSize(): number {
  return 1066;
}
