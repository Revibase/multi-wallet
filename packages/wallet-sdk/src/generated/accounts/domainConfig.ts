/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const DOMAIN_CONFIG_DISCRIMINATOR = new Uint8Array([
  201, 232, 212, 229, 59, 241, 106, 197,
]);

export function getDomainConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DOMAIN_CONFIG_DISCRIMINATOR
  );
}

export type DomainConfig = {
  discriminator: ReadonlyUint8Array;
  originLength: number;
  authority: Address;
  rpIdHash: ReadonlyUint8Array;
  bump: number;
  isDisabled: number;
  rpIdLength: number;
  rpId: ReadonlyUint8Array;
  origin: ReadonlyUint8Array;
  padding: ReadonlyUint8Array;
};

export type DomainConfigArgs = {
  originLength: number;
  authority: Address;
  rpIdHash: ReadonlyUint8Array;
  bump: number;
  isDisabled: number;
  rpIdLength: number;
  rpId: ReadonlyUint8Array;
  origin: ReadonlyUint8Array;
  padding: ReadonlyUint8Array;
};

export function getDomainConfigEncoder(): Encoder<DomainConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['originLength', getU16Encoder()],
      ['authority', getAddressEncoder()],
      ['rpIdHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['bump', getU8Encoder()],
      ['isDisabled', getU8Encoder()],
      ['rpIdLength', getU8Encoder()],
      ['rpId', fixEncoderSize(getBytesEncoder(), 256)],
      ['origin', fixEncoderSize(getBytesEncoder(), 512)],
      ['padding', fixEncoderSize(getBytesEncoder(), 1)],
    ]),
    (value) => ({ ...value, discriminator: DOMAIN_CONFIG_DISCRIMINATOR })
  );
}

export function getDomainConfigDecoder(): Decoder<DomainConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['originLength', getU16Decoder()],
    ['authority', getAddressDecoder()],
    ['rpIdHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['bump', getU8Decoder()],
    ['isDisabled', getU8Decoder()],
    ['rpIdLength', getU8Decoder()],
    ['rpId', fixDecoderSize(getBytesDecoder(), 256)],
    ['origin', fixDecoderSize(getBytesDecoder(), 512)],
    ['padding', fixDecoderSize(getBytesDecoder(), 1)],
  ]);
}

export function getDomainConfigCodec(): Codec<DomainConfigArgs, DomainConfig> {
  return combineCodec(getDomainConfigEncoder(), getDomainConfigDecoder());
}

export function decodeDomainConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DomainConfig, TAddress>;
export function decodeDomainConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DomainConfig, TAddress>;
export function decodeDomainConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<DomainConfig, TAddress> | MaybeAccount<DomainConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDomainConfigDecoder()
  );
}

export async function fetchDomainConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DomainConfig, TAddress>> {
  const maybeAccount = await fetchMaybeDomainConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDomainConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DomainConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDomainConfig(maybeAccount);
}

export async function fetchAllDomainConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DomainConfig>[]> {
  const maybeAccounts = await fetchAllMaybeDomainConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDomainConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DomainConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeDomainConfig(maybeAccount));
}

export function getDomainConfigSize(): number {
  return 846;
}
