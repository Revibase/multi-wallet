/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedChangeConfigInstruction,
  type ParsedCreateDomainConfigInstruction,
  type ParsedCreateInstruction,
  type ParsedDeleteDomainConfigInstruction,
  type ParsedDisableDomainConfigInstruction,
  type ParsedEditDomainConfigInstruction,
  type ParsedNativeTransferIntentInstruction,
  type ParsedTokenTransferIntentInstruction,
  type ParsedTransactionBufferCloseInstruction,
  type ParsedTransactionBufferCreateInstruction,
  type ParsedTransactionBufferExecuteInstruction,
  type ParsedTransactionBufferExtendInstruction,
  type ParsedTransactionBufferVoteInstruction,
  type ParsedTransactionExecuteInstruction,
  type ParsedTransactionExecuteSyncInstruction,
} from '../instructions';

export const MULTI_WALLET_PROGRAM_ADDRESS =
  'pkeyt2Txg77e2JSS2K44hDnC2p6uE4jXnd2UQZxZ2oE' as Address<'pkeyt2Txg77e2JSS2K44hDnC2p6uE4jXnd2UQZxZ2oE'>;

export enum MultiWalletAccount {
  DomainConfig,
  Settings,
  TransactionBuffer,
}

export function identifyMultiWalletAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MultiWalletAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([201, 232, 212, 229, 59, 241, 106, 197])
      ),
      0
    )
  ) {
    return MultiWalletAccount.DomainConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([223, 179, 163, 190, 177, 224, 67, 173])
      ),
      0
    )
  ) {
    return MultiWalletAccount.Settings;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 36, 35, 219, 93, 225, 110, 96])
      ),
      0
    )
  ) {
    return MultiWalletAccount.TransactionBuffer;
  }
  throw new Error(
    'The provided account could not be identified as a multiWallet account.'
  );
}

export enum MultiWalletInstruction {
  ChangeConfig,
  Create,
  CreateDomainConfig,
  DeleteDomainConfig,
  DisableDomainConfig,
  EditDomainConfig,
  NativeTransferIntent,
  TokenTransferIntent,
  TransactionBufferClose,
  TransactionBufferCreate,
  TransactionBufferExecute,
  TransactionBufferExtend,
  TransactionBufferVote,
  TransactionExecute,
  TransactionExecuteSync,
}

export function identifyMultiWalletInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): MultiWalletInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 158, 114, 115, 94, 210, 244, 233])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.ChangeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([24, 30, 200, 40, 5, 28, 7, 119])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.Create;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([197, 81, 191, 2, 164, 140, 184, 90])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.CreateDomainConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([225, 169, 39, 18, 125, 147, 36, 29])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.DeleteDomainConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 163, 147, 131, 58, 46, 131, 51])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.DisableDomainConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 212, 99, 229, 72, 93, 185, 231])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.EditDomainConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 156, 213, 157, 88, 202, 2, 151])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.NativeTransferIntent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 91, 96, 155, 132, 232, 179, 48])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TokenTransferIntent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 182, 208, 228, 136, 24, 178, 102])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TransactionBufferClose;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([245, 201, 113, 108, 37, 63, 29, 89])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TransactionBufferCreate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 73, 34, 19, 129, 99, 128, 73])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TransactionBufferExecute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([230, 157, 67, 56, 5, 238, 245, 146])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TransactionBufferExtend;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 50, 79, 187, 94, 53, 82, 122])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TransactionBufferVote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 171, 78, 134, 252, 84, 186, 189])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TransactionExecute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 138, 204, 32, 181, 61, 153, 227])
      ),
      0
    )
  ) {
    return MultiWalletInstruction.TransactionExecuteSync;
  }
  throw new Error(
    'The provided instruction could not be identified as a multiWallet instruction.'
  );
}

export type ParsedMultiWalletInstruction<
  TProgram extends string = 'pkeyt2Txg77e2JSS2K44hDnC2p6uE4jXnd2UQZxZ2oE',
> =
  | ({
      instructionType: MultiWalletInstruction.ChangeConfig;
    } & ParsedChangeConfigInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.CreateDomainConfig;
    } & ParsedCreateDomainConfigInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.DeleteDomainConfig;
    } & ParsedDeleteDomainConfigInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.DisableDomainConfig;
    } & ParsedDisableDomainConfigInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.EditDomainConfig;
    } & ParsedEditDomainConfigInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.NativeTransferIntent;
    } & ParsedNativeTransferIntentInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TokenTransferIntent;
    } & ParsedTokenTransferIntentInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TransactionBufferClose;
    } & ParsedTransactionBufferCloseInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TransactionBufferCreate;
    } & ParsedTransactionBufferCreateInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TransactionBufferExecute;
    } & ParsedTransactionBufferExecuteInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TransactionBufferExtend;
    } & ParsedTransactionBufferExtendInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TransactionBufferVote;
    } & ParsedTransactionBufferVoteInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TransactionExecute;
    } & ParsedTransactionExecuteInstruction<TProgram>)
  | ({
      instructionType: MultiWalletInstruction.TransactionExecuteSync;
    } & ParsedTransactionExecuteSyncInstruction<TProgram>);
